import telebot
import schedule
import threading
import time


from config import TOKEN, HARVEST, PRICE_UPGRADE_DISEASE_RESISTANCE, PRICE_UPGRADE_TIME_WATERING, \
                    PRICE_BUY_BEDS, ID_CHANNEL_MARKET, ID_CHANNEL_NEWS, ID_ITEM_FOR_SELL, ID_CHAT_REPORTS
from database import Database
import keyboard as kb
import game_logic as gl
import create_table
TOKEN = "8055869737:AAEsL52Eh_jEsOSHbzQ3RjWNAJByfgY_Gd0"
bot = telebot.TeleBot(TOKEN)

create_table.create_database()
create_table.update_database_schema()

@bot.callback_query_handler(lambda call: call.data == 'continue_training')
def continue_training(call):
    id = call.from_user.id
    bot.delete_messages(id, [call.message.message_id, call.message.message_id-1])

@bot.message_handler(commands=['start'])
def start(message):
    id = message.from_user.id
    db = Database()
    if db.check_users(id) == True: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db.set_user(id, gl.end_time(4))
        db.set_farm(id)
        db.set_bed(id, 1, gl.end_time(8))
        db.set_inventory(id, 1, 10)
        info_of_user = db.get_info_for_tasks(id)
        db.set_tasks(id, gl.generate_tasks(info_of_user, user['money']))
        text = f'üåª –ü—Ä–∏–≤–µ—Ç, –±—É–¥—É—â–∏–π —Ñ–µ—Ä–º–µ—Ä! üåª\n'\
                f'–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –±–µ—Å–∫—Ä–∞–π–Ω–∏–µ –ø–æ–ª—è, –≥–¥–µ:\n'\
                f'‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–µ–º—è ‚Äî –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏\n'\
                f'‚Ä¢ –ö–∞–∂–¥—ã–π —É—Ä–æ–∂–∞–π ‚Äî –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ\n'\
                f'‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ\n'\
                f'–§–µ—Ä–º–∞ –∂–¥–µ—Ç —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è.\n\n'\
                f"üë£ –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –æ–Ω–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!"
        bot.send_message(id, text, reply_markup=kb.start_kb)
    else:
        user = db.get_me(id)
        if user['locate'] == 'training':
            bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
            return

        if gl.has_time_passed(user['buster_x10_time_all']) == False:
            text = f'üåü –ü—Ä–æ—Ñ–∏–ª—å üåü\n'\
                    f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'\
                    f'üÜî –¢–≤–æ–π ID: {id}\n'\
                    f'üí∞ –ú–æ–Ω–µ—Ç: {user["money"]}\n'\
                    f'ü™ô –ó–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç: {user["gold_money"]}\n'\
                    f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
        else:
            text = f'üåü –ü—Ä–æ—Ñ–∏–ª—å üåü\n'\
                    f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'\
                    f'üÜî –¢–≤–æ–π ID: {id}\n'\
                    f'üí∞ –ú–æ–Ω–µ—Ç: {user["money"]}\n'\
                    f'ü™ô –ó–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç: {user["gold_money"]}\n'\
                    f'‚ö°–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±—É—Å—Ç–µ—Ä:\n'\
                    f'‚è≥‚ö°–ë—ã—Å—Ç—Ä–µ–µ –≤ 10 —Ä–∞–∑\n'\
                    f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
        bot.send_message(id, text, reply_markup=kb.profile_kb)
    db.edit_locate(id, 'start')

# –û–±—É—á–µ–Ω–∏–µ

@bot.callback_query_handler(lambda call: call.data == 'pass_training')
def pass_training(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'training')
    text = "üåæ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É!* üåæ\n\n"\
           "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –æ—Å–º–æ—Ç—Ä–∞ —Ç–≤–æ–∏—Ö –≤–ª–∞–¥–µ–Ω–∏–π."
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.farm_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'bed_training')
def bed_training(call):
    id = call.from_user.id
    text =  "ü™± *[ –¢–≤–æ—è –ø–µ—Ä–≤–∞—è –≥—Ä—è–¥–∫–∞ ]* ü™±\n\n"\
            "‚ñ∏ üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –ª—É–Ω–æ–∫:* 5\n"\
            "‚ñ∏ üõ†Ô∏è *–ì—Ä–∞–±–ª–∏:* ‚ùå\n"\
            "‚ñ∏ üå± *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* –ü—É—Å—Ç–æ\n"\
            "‚ñ∏ üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã:* 100%\n\n"\
            "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"\
            "1Ô∏è‚É£ –ù—É–∂–Ω–æ –ø–æ—Å–∞–¥–∏—Ç—å —Å–µ–º–µ–Ω–∞\n"\
            "2Ô∏è‚É£ –î–ª—è —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –≥—Ä–∞–±–ª–∏\n"\
            "3Ô∏è‚É£ –í—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –Ω–∞–π–¥—ë—à—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n\n"\
            "–î–∞–≤–∞–π –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏!"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.in_shop_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'in_shop')
def in_shop(call):
    id = call.from_user.id
    text = "üè™ *–ú–∞–≥–∞–∑–∏–Ω —Ñ–µ—Ä–º–µ—Ä–∞*\n\n"\
           "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n"\
           "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –≤—ã–±–æ—Ä–∞ —Å–µ–º—è–Ω!"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.seeds_training_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'seed')
def seed(call):
    id = call.from_user.id
    text = "üåæ *–û—Ç–¥–µ–ª —Å–µ–º—è–Ω*\n\n"\
           "–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç –ø—à–µ–Ω–∏—Ü—ã!\n"\
           "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ - –ø—à–µ–Ω–∏—Ü–∞ –Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–∞ –∏ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç—ë—Ç."
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.buy_wheat_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'buy_wheat_training')
def buy_wheat_training(call):
    id = call.from_user.id
    text = "üì¶ *–ü—à–µ–Ω–∏—á–Ω—ã–µ —Å–µ–º–µ–Ω–∞*\n\n"\
           "–í –Ω–∞–ª–∏—á–∏–∏ –∫–∞–∫ —Ä–∞–∑ 5 –ø–∞–∫–µ—Ç–∏–∫–æ–≤ - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—è–¥–∫–∏!\n"\
           "–•–≤–∞—Ç–∞–π –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏!"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.buy_wheat_5_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'buy_wheat_5')
def buy_wheat_5(call):
    id = call.from_user.id
    text = "‚úÖ *–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!*\n\n"\
           "–°–µ–º–µ–Ω–∞ –ø—à–µ–Ω–∏—Ü—ã —Ç–µ–ø–µ—Ä—å –≤ —Ç–≤–æ—ë–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!\n\n"\
           "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≥—Ä–∞–±–ª–∏ - –±–µ–∑ –Ω–∏—Ö —É—Ä–æ–∂–∞–π –Ω–µ —Å–æ–±—Ä–∞—Ç—å."
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.rake_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'rake_training')
def rake_training(call):
    id = call.from_user.id
    text = "üõ†Ô∏è *–û—Ç–¥–µ–ª –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è*\n\n"\
           "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–æ–π–¥—É—Ç –ø—Ä–æ—Å—Ç—ã–µ *–¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –≥—Ä–∞–±–ª–∏*.\n"\
           "–ü–æ–∑–∂–µ —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–æ–ª–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.buy_rake_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'buy_rake_training')
def buy_rake_training(call):
    id = call.from_user.id
    text = "üéâ *–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –≥–æ—Ç–æ–≤!*\n\n"\
           "–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ:\n"\
           "‚ñ∏ –°–µ–º–µ–Ω–∞ –ø—à–µ–Ω–∏—Ü—ã\n"\
           "‚ñ∏ –î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –≥—Ä–∞–±–ª–∏\n\n"\
           "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ñ–µ—Ä–º—É - –≤—Ä–µ–º—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.farm_work_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'farm_work')
def farm_work(call):
    id = call.from_user.id
    text =  "ü™± *[ –¢–≤–æ—è –≥—Ä—è–¥–∫–∞ ]* ü™±\n\n"\
            "‚ñ∏ üéØ *–õ—É–Ω–æ–∫:* 5\n"\
            "‚ñ∏ üõ†Ô∏è *–ì—Ä–∞–±–ª–∏:* –î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ ‚úÖ\n"\
            "‚ñ∏ üå± *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* –ü—É—Å—Ç–æ\n"\
            "‚ñ∏ üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* 100%\n\n"\
            "–ü–æ—Ä–∞ –ø–æ—Å–∞–¥–∏—Ç—å –Ω–∞—à–∏ —Å–µ–º–µ–Ω–∞ –ø—à–µ–Ω–∏—Ü—ã!"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.set_seed_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'set_seed_training')
def set_seed_training(call):
    id = call.from_user.id
    text = "üå± *–ü–æ—Å–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"\
           "–°–µ–º–µ–Ω–∞ –ø—à–µ–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—Å–∞–∂–µ–Ω—ã!\n\n"\
           "–î–ª—è –æ–±—É—á–µ–Ω–∏—è —É—Å–∫–æ—Ä—é –ø—Ä–æ—Ü–µ—Å—Å - —É—Ä–æ–∂–∞–π —É–∂–µ –≥–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É!"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.get_harvest_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'get_harvest_training')
def get_harvest_training(call):
    id = call.from_user.id
    text = "üéâ *–ü–µ—Ä–≤—ã–π —É—Ä–æ–∂–∞–π!*\n\n"\
           "–¢—ã –ø–æ–ª—É—á–∏–ª:\n"\
           "‚ñ∏ 5 –µ–¥–∏–Ω–∏—Ü –ø—à–µ–Ω–∏—Ü—ã\n"\
           "‚ñ∏ –†–µ–¥–∫–∏–π —Ä–µ—Å—É—Ä—Å: *–ú–æ–ª–µ–∫—É–ª–∞ –¥–æ–∂–¥—è* üåßÔ∏è\n\n"\
           "*–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:*\n"\
           "–†–µ–¥–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!\n\n"\
           "–¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∂—É, –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —É—Ä–æ–∂–∞–π."
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.go_buyer_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'go_buyer')
def go_buyer(call):
    id = call.from_user.id
    text = "üë®‚Äçüåæ *–ú–µ—Å—Ç–Ω—ã–π —Å–∫—É–ø—â–∏–∫*\n\n"\
           "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–∂–∞–π –∑–∞ –º–æ–Ω–µ—Ç—ã.\n"\
           "–ù–µ —Å–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π, –Ω–æ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞."
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.sell_harvest_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'sell_harvest_training')
def sell_harvest_training(call):
    id = call.from_user.id
    text = "üí∞ *–ü—Ä–æ–¥–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"\
           "–¢—ã –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –º–æ–Ω–µ—Ç—ã!\n\n"\
           "–ù–æ —ç—Ç–æ –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n"\
           "–ü–æ–∫–∞–∂—É –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç..."
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.go_market_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'go_market')
def go_market(call):
    id = call.from_user.id
    text = "üè™ *–§–µ—Ä–º–µ—Ä—Å–∫–∏–π —Ä—ã–Ω–æ–∫*\n\n"\
           "@farmhappymarket\n\n"\
           "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"\
           "‚ñ∏ –ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º\n"\
           "‚ñ∏ –ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º\n"\
           "‚ñ∏ –ù–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–¥–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã\n\n"\
           "–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.end_training_kb, parse_mode='Markdown')

@bot.callback_query_handler(lambda call: call.data == 'end_training')
def end_training(call):
    id = call.from_user.id
    text = "üéì *–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n"\
           "–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –æ—Å–Ω–æ–≤—ã —Ñ–µ—Ä–º–µ—Ä—Å—Ç–≤–∞:\n"\
           "‚ñ∏ –ö–∞–∫ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å —É—Ä–æ–∂–∞–π\n"\
           "‚ñ∏ –ö–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã\n"\
           "‚ñ∏ –ì–¥–µ –∏—Å–∫–∞—Ç—å –ª—É—á—à–∏–µ —Å–¥–µ–ª–∫–∏\n\n"\
           "–ñ–µ–ª–∞—é –æ–±–∏–ª—å–Ω—ã—Ö —É—Ä–æ–∂–∞–µ–≤ –∏ –±–æ–ª—å—à–∏—Ö –ø—Ä–∏–±—ã–ª–µ–π!\n"\
           "–í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º! üåü"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.go_game_kb, parse_mode='Markdown')



@bot.message_handler(commands=['profile'])
def profile(message):
    id = message.from_user.id
    db = Database()
    user = db.get_me(id)

    if user['locate'] == 'training':
        bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
        return
    
    if gl.has_time_passed(user['buster_x10_time_all']) == False:
        text = f'üåü –ü—Ä–æ—Ñ–∏–ª—å üåü\n'\
                f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'\
                f'üÜî –¢–≤–æ–π ID: {id}\n'\
                f'üí∞ –ú–æ–Ω–µ—Ç: {user["money"]}\n'\
                f'ü™ô –ó–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç: {user["gold_money"]}\n'\
                f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
    else:
        text = f'üåü –ü—Ä–æ—Ñ–∏–ª—å üåü\n'\
                f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'\
                f'üÜî –¢–≤–æ–π ID: {id}\n'\
                f'üí∞ –ú–æ–Ω–µ—Ç: {user["money"]}\n'\
                f'ü™ô –ó–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç: {user["gold_money"]}\n'\
                f'‚ö°–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±—É—Å—Ç–µ—Ä:\n'\
                f'‚è≥‚ö°–ë—ã—Å—Ç—Ä–µ–µ –≤ 10 —Ä–∞–∑\n'\
                f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
    bot.send_message(id, text, reply_markup=kb.profile_kb)

@bot.callback_query_handler(lambda call: call.data == 'profile')
def profile(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    if gl.has_time_passed(user['buster_x10_time_all']) == False:
        text = f'üåü –ü—Ä–æ—Ñ–∏–ª—å üåü\n'\
                f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'\
                f'üÜî –¢–≤–æ–π ID: {id}\n'\
                f'üí∞ –ú–æ–Ω–µ—Ç: {user["money"]}\n'\
                f'ü™ô –ó–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç: {user["gold_money"]}\n'\
                f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
    else:
        text = f'üåü –ü—Ä–æ—Ñ–∏–ª—å üåü\n'\
                f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'\
                f'üÜî –¢–≤–æ–π ID: {id}\n'\
                f'üí∞ –ú–æ–Ω–µ—Ç: {user["money"]}\n'\
                f'ü™ô –ó–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç: {user["gold_money"]}\n'\
                f'‚ö°–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±—É—Å—Ç–µ—Ä:\n'\
                f'‚è≥‚ö°–ë—ã—Å—Ç—Ä–µ–µ –≤ 10 —Ä–∞–∑\n'\
                f'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.profile_kb)
    db.edit_locate(id, 'profile')

@bot.callback_query_handler(lambda call: call.data == 'clans')
def clans(call):
    id = call.from_user.id 
    text = f'–°–∫–æ—Ä–æ...'
    bot.answer_callback_query(call.id, text)

@bot.callback_query_handler(lambda call: call.data == 'tasks')
def tasks(call):
    id = call.from_user.id 
    db = Database()
    tasks = db.get_tasks(id)
    if tasks['task1_completed'] != -1 and tasks['task2_completed'] != -1:
        text = f'üìÖ **–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è** üìÖ\n\n'\
                f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 1**\n'\
                f'‚ûñ {tasks["text_task1"]}\n'\
                f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ {tasks["task1_completed"]}\n\n'\
                f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 2**\n'\
                f'‚ûñ {tasks["text_task2"]}\n'\
                f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ {tasks["task2_completed"]}'
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_profile_kb)
    
    if tasks['task1_completed'] == -1 and tasks['task2_completed'] == -1:
        if tasks['get_reward'] == 0:
            text = f'üìÖ **–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è** üìÖ\n\n'\
                    f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 1**\n'\
                    f'‚ûñ {tasks["text_task1"]}\n'\
                    f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ: –ì–æ—Ç–æ–≤–æ\n\n'\
                    f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 2**\n'\
                    f'‚ûñ {tasks["text_task2"]}\n'\
                    f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ: –ì–æ—Ç–æ–≤–æ\n'\
                    f'‚úÖ–ú–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É'
            bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.get_reward_kb)
        else:
            text = f'üìÖ **–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è** üìÖ\n\n'\
                    f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 1**\n'\
                    f'‚ûñ {tasks["text_task1"]}\n'\
                    f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ: –ì–æ—Ç–æ–≤–æ\n\n'\
                    f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 2**\n'\
                    f'‚ûñ {tasks["text_task2"]}\n'\
                    f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ: –ì–æ—Ç–æ–≤–æ'
            bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_profile_kb)

    if tasks['task1_completed'] == -1 and tasks['task2_completed'] != -1:
        text = f'üìÖ **–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è** üìÖ\n\n'\
                f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 1**\n'\
                f'‚ûñ {tasks["text_task1"]}\n'\
                f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ: –ì–æ—Ç–æ–≤–æ\n\n'\
                f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 2**\n'\
                f'‚ûñ {tasks["text_task2"]}\n'\
                f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ {tasks["task2_completed"]}'
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_profile_kb)
        
    if tasks['task1_completed'] != -1 and tasks['task2_completed'] == -1:
        text = f'üìÖ **–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è** üìÖ\n\n'\
                f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 1**\n'\
                f'‚ûñ {tasks["text_task1"]}\n'\
                f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ {tasks["task1_completed"]}\n\n'\
                f'‚úÖ **–ó–∞–¥–∞–Ω–∏–µ 2**\n'\
                f'‚ûñ {tasks["text_task2"]}\n'\
                f'‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ: –ì–æ—Ç–æ–≤–æ'
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_profile_kb)

@bot.callback_query_handler(lambda call: call.data == 'get_reward')
def get_reward(call):
    id = call.from_user.id 
    db = Database()
    reward = gl.random_reward_tasks()
    box = db.get_items_id(reward[0])
    text = f'‚ú® ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚ú®\n'\
            f'  üéÅ **{box["name"]}**\n'\
            f'‚ú® ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚ú®\n\n'\
            f'ü™ô **+{reward[1]} –º–æ–Ω–µ—Ç** ü™ô'
    db.set_inventory(id, reward[0], 1)
    db.add_money(id, reward[1])
    db.edit_get_reward(id)
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_tasks_kb)

@bot.message_handler(commands=['inventory'])
def inventory(message):
    id = message.from_user.id
    db = Database()
    user = db.get_me(id)

    if user['locate'] == 'training':
        bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
        return
    
    items = db.get_inventory(id)
    text = 'üß∞ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å\n\n'
    if not items:
        text = f'–¢–≤–æ–π –∏–Ω–≤–µ—Ç–∞—Ä—å –ø—É—Å—Ç!'
    
    for item in items:
        text += f"üÜî {item['item_id']} ‚îÇ {item['name']} ‚îÇ x{item['quantity']} ‚îÇ\n"
    bot.send_message(id, text, reply_markup=kb.box_kb)

@bot.callback_query_handler(lambda call: call.data == 'inventory')
def inventory(call):
    id = call.from_user.id
    db = Database()
    items = db.get_inventory(id)
    text = ''
    if not items:
        text = f'–¢–≤–æ–π –∏–Ω–≤–µ—Ç–∞—Ä—å –ø—É—Å—Ç!'
    
    for item in items:
        text += f"‚îÇ {item['name']} ‚îÇ x{item['quantity']} ‚îÇ\n"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.box_kb)

@bot.message_handler(commands=['city'])
def city(message):
    id = message.from_user.id 
    db = Database()
    user = db.get_me(id)

    if user['locate'] == 'training':
        bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
        return
    
    text = f"‚û°Ô∏è –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    bot.send_message(id, text, reply_markup=kb.city_kb)

@bot.callback_query_handler(lambda call: call.data == 'city')
def city_call(call):
    id = call.from_user.id 
    text = f"‚û°Ô∏è –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.city_kb)


@bot.callback_query_handler(lambda call: call.data == 'buyer')
def buyer(call):
    id = call.from_user.id 
    db = Database()
    inventory_user = db.get_item_inventory_type(id, '—É—Ä–æ–∂–∞–π')
    text = f"üå± *–§–µ—Ä–º–µ—Ä—Å–∫–∏–π —Ä—ã–Ω–æ–∫* üè™\n\n"\
            f"üìÉ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –°–∫—É–ø—â–∏–∫–∞:\n"\
            f"<i>üîπ –ü—à–µ–Ω–∏—Ü–∞ ‚Äî 15 –º–æ–Ω–µ—Ç</i>\n"\
            f"<i>üîπ –ú–æ—Ä–∫–æ–≤—å ‚Äî 30 –º–æ–Ω–µ—Ç</i>\n"\
            f"<i>üîπ –ö—É–∫—É—Ä—É–∑–∞ ‚Äî 40 –º–æ–Ω–µ—Ç</i>\n"\
            f"<i>üîπ –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å ‚Äî 80 –º–æ–Ω–µ—Ç</i>\n"\
            f"<i>üîπ –õ—É–Ω–Ω—ã–π –ª–æ—Ç–æ—Å ‚Äî 800 –º–æ–Ω–µ—Ç</i>\n"\
            f"<i>üîπ –û–≥–Ω–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ü ‚Äî 450 –º–æ–Ω–µ—Ç</i>"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.buyer(inventory_user), parse_mode='html')
    
@bot.callback_query_handler(lambda call: call.data == 'sell_item_16')
def sell_item_16(call):
    id = call.from_user.id 
    db = Database()
    item = db.get_item_invetory(id, 16)
    price = db.get_items_id(16)['sell_price']
    tasks = db.get_tasks(id)
    summa = price*item['quantity']
    text = f"üí∞ *–£–¥–∞—á–Ω–∞—è —Å–¥–µ–ª–∫–∞!* üí∞\n–¢—ã –ø—Ä–æ–¥–∞–ª –≤–µ—Å—å —É—Ä–æ–∂–∞–π –ø—à–µ–Ω–∏—Ü—ã –∑–∞ {summa} –º–æ–Ω–µ—Ç!"
    db.add_money(id, summa)
    db.remove_item_id(id, 16, item['quantity'])

    if tasks['plant1'] == 0 and tasks['task1_completed'] != -1:
        db.update_completed_task(id, 1, summa)
    if tasks['plant2'] == 0 and tasks['task2_completed'] != -1:
        db.update_completed_task(id, 2, summa)

    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_buyer_kb)

@bot.callback_query_handler(lambda call: call.data == 'sell_item_17')
def sell_item_17(call):
    id = call.from_user.id 
    db = Database()
    item = db.get_item_invetory(id, 17)
    price = db.get_items_id(17)['sell_price']
    tasks = db.get_tasks(id)
    summa = price*item['quantity']
    text = f"üí∞ *–£–¥–∞—á–Ω–∞—è —Å–¥–µ–ª–∫–∞!* üí∞\n–¢—ã –ø—Ä–æ–¥–∞–ª –≤–µ—Å—å —É—Ä–æ–∂–∞–π –º–æ—Ä–∫–æ–≤–∏ –∑–∞ {summa} –º–æ–Ω–µ—Ç!"
    db.add_money(id, summa)
    db.remove_item_id(id, 17, item['quantity'])

    if tasks['plant1'] == 0 and tasks['task1_completed'] != -1:
        db.update_completed_task(id, 1, summa)
    if tasks['plant2'] == 0 and tasks['task2_completed'] != -1:
        db.update_completed_task(id, 2, summa)

    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_buyer_kb)

@bot.callback_query_handler(lambda call: call.data == 'sell_item_18')
def sell_item_18(call):
    id = call.from_user.id 
    db = Database()
    item = db.get_item_invetory(id, 18)
    price = db.get_items_id(18)['sell_price']
    tasks = db.get_tasks(id)
    summa = price*item['quantity']
    text = f"üí∞ *–£–¥–∞—á–Ω–∞—è —Å–¥–µ–ª–∫–∞!* üí∞\n–¢—ã –ø—Ä–æ–¥–∞–ª –≤–µ—Å—å —É—Ä–æ–∂–∞–π –∫—É–∫—É—Ä—É–∑—ã –∑–∞ {summa} –º–æ–Ω–µ—Ç!"
    db.add_money(id, summa)
    db.remove_item_id(id, 18, item['quantity'])

    if tasks['plant1'] == 0 and tasks['task1_completed'] != -1:
        db.update_completed_task(id, 1, summa)
    if tasks['plant2'] == 0 and tasks['task2_completed'] != -1:
        db.update_completed_task(id, 2, summa)

    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_buyer_kb)

@bot.callback_query_handler(lambda call: call.data == 'sell_item_19')
def sell_item_19(call):
    id = call.from_user.id 
    db = Database()
    item = db.get_item_invetory(id, 19)
    price = db.get_items_id(19)['sell_price']
    tasks = db.get_tasks(id)
    summa = price*item['quantity']
    text = f"üí∞ *–£–¥–∞—á–Ω–∞—è —Å–¥–µ–ª–∫–∞!* üí∞\n–¢—ã –ø—Ä–æ–¥–∞–ª –≤–µ—Å—å —É—Ä–æ–∂–∞–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è –∑–∞ {summa} –º–æ–Ω–µ—Ç!"
    db.add_money(id, summa)
    db.remove_item_id(id, 19, item['quantity'])

    if tasks['plant1'] == 0 and tasks['task1_completed'] != -1:
        db.update_completed_task(id, 1, summa)
    if tasks['plant2'] == 0 and tasks['task2_completed'] != -1:
        db.update_completed_task(id, 2, summa)

    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_buyer_kb)

@bot.callback_query_handler(lambda call: call.data == 'sell_item_20')
def sell_item_20(call):
    id = call.from_user.id 
    db = Database()
    item = db.get_item_invetory(id, 20)
    price = db.get_items_id(20)['sell_price']
    tasks = db.get_tasks(id)
    summa = price*item['quantity']
    text = f"üí∞ *–£–¥–∞—á–Ω–∞—è —Å–¥–µ–ª–∫–∞!* üí∞\n–¢—ã –ø—Ä–æ–¥–∞–ª –≤–µ—Å—å —É—Ä–æ–∂–∞–π –ª—É–Ω–Ω–æ–≥–æ –ª–æ—Ç–æ—Å–∞ –∑–∞ {summa} –º–æ–Ω–µ—Ç!"
    db.add_money(id, summa)
    db.remove_item_id(id, 20, item['quantity'])

    if tasks['plant1'] == 0 and tasks['task1_completed'] != -1:
        db.update_completed_task(id, 1, summa)
    if tasks['plant2'] == 0 and tasks['task2_completed'] != -1:
        db.update_completed_task(id, 2, summa)

    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_buyer_kb)

@bot.callback_query_handler(lambda call: call.data == 'sell_item_21')
def sell_item_21(call):
    id = call.from_user.id 
    db = Database()
    item = db.get_item_invetory(id, 21)
    price = db.get_items_id(21)['sell_price']
    tasks = db.get_tasks(id)
    summa = price*item['quantity']
    text = f"üí∞ *–£–¥–∞—á–Ω–∞—è —Å–¥–µ–ª–∫–∞!* üí∞\n–¢—ã –ø—Ä–æ–¥–∞–ª –≤–µ—Å—å —É—Ä–æ–∂–∞–π –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Ü–∞ –∑–∞ {summa} –º–æ–Ω–µ—Ç!"
    db.add_money(id, summa)
    db.remove_item_id(id, 21, item['quantity'])

    if tasks['plant1'] == 0 and tasks['task1_completed'] != -1:
        db.update_completed_task(id, 1, summa)
    if tasks['plant2'] == 0 and tasks['task2_completed'] != -1:
        db.update_completed_task(id, 2, summa)

    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_buyer_kb)

@bot.callback_query_handler(lambda call: call.data == 'shop')
def shop(call):
    id = call.from_user.id
    text = f"üöú *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–µ—Ä–º–µ—Ä—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω!* üåæ\n"\
            f"–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.shop_kb)

@bot.callback_query_handler(lambda call: call.data == 'seeds')
def seeds(call):
    id = call.from_user.id
    text = f'–°–µ–º–µ–Ω–∞\n'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.seeds_kb)

@bot.callback_query_handler(lambda call: call.data == 'seeds_2')
def seeds_2(call):
    id = call.from_user.id 
    bot.edit_message_reply_markup(id, call.message.message_id, reply_markup=kb.seeds_2_kb)


@bot.callback_query_handler(lambda call: call.data == 'buy_wheat')
def buy_wheat(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_wheat')
    item = db.get_items_id(1)
    text = f"‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n"\
            f"{item['name']}\n"\
            f"‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ\n"\
            f"{item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_seeds_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_carrot')
def buy_carrot(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_carrot')
    item = db.get_items_id(2)
    text = f"‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n"\
            f"{item['name']}\n"\
            f"‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ\n"\
            f"{item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_seeds_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_corn')
def buy_corn(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_corn')
    item = db.get_items_id(3)
    text = f"‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n"\
            f"{item['name']}\n"\
            f"‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ\n"\
            f"{item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_seeds_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_potato')
def buy_potato(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_potato')
    item = db.get_items_id(4)
    text = f"‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n"\
            f"{item['name']}\n"\
            f"‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ\n"\
            f"{item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_seeds_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_moon_lotus')
def buy_moon_lotus(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_moon_lotus')
    item = db.get_items_id(5)
    text = f"‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n"\
            f"{item['name']}\n"\
            f"‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ\n"\
            f"{item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_seeds_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_fire_pepper')
def buy_fire_pepper(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_fire_pepper')
    item = db.get_items_id(6)
    text = f"‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n"\
            f"{item['name']}\n"\
            f"‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ\n"\
            f"{item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_seeds_kb)


@bot.callback_query_handler(lambda call: call.data == 'quantity_buy_1')
def quantity_buy_1(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    if user['locate'] == 'buy_wheat':
        item = db.get_items_id(1)
    if user['locate'] == 'buy_corn':
        item = db.get_items_id(3)
    if user['locate'] == 'buy_carrot':
        item = db.get_items_id(2)
    if user['locate'] == 'buy_potato':
        item = db.get_items_id(4)
    if user['locate'] == 'buy_moon_lotus':
        item = db.get_items_id(5)
    if user['locate'] == 'buy_fire_pepper':
        item = db.get_items_id(6)

    if user['money'] >= item['price']:
        db.set_inventory(id, int(item['item_id']))
        db.edit_money(id, int(item['price']))
        user = db.get_me(id)
        text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: **{item['name']}** (1 —à—Ç.)"
        text_for_message = f"‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n"\
            f"{item['name']}\n"\
            f"‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ\n"\
            f"{item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
        bot.edit_message_text(text_for_message, id, call.message.message_id, reply_markup=kb.card_seeds_kb)
    else:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
    bot.answer_callback_query(call.id, text)

@bot.callback_query_handler(lambda call: call.data == 'quantity_buy_5')
def quantity_buy_5(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    if user['locate'] == 'buy_wheat':
        item = db.get_items_id(1)
    if user['locate'] == 'buy_corn':
        item = db.get_items_id(3)
    if user['locate'] == 'buy_carrot':
        item = db.get_items_id(2)
    if user['locate'] == 'buy_potato':
        item = db.get_items_id(4)
    if user['locate'] == 'buy_moon_lotus':
        item = db.get_items_id(5)
    if user['locate'] == 'buy_fire_pepper':
        item = db.get_items_id(6)

    if user['money'] >= item['price']*5:
        db.set_inventory(id, int(item['item_id']), 5)
        db.edit_money(id, int(item['price'])*5)
        user = db.get_me(id)
        text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: **{item['name']}** (5 —à—Ç.)"
        text_for_message = f"‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n"\
            f"{item['name']}\n"\
            f"‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ\n"\
            f"{item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
        bot.edit_message_text(text_for_message, id, call.message.message_id, reply_markup=kb.card_seeds_kb)
    else:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
    bot.answer_callback_query(call.id, text)

@bot.callback_query_handler(lambda call: call.data == 'quantity_buy_10')
def quantity_buy_10(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    if user['locate'] == 'buy_wheat':
        item = db.get_items_id(1)
    if user['locate'] == 'buy_corn':
        item = db.get_items_id(3)
    if user['locate'] == 'buy_carrot':
        item = db.get_items_id(2)
    if user['locate'] == 'buy_potato':
        item = db.get_items_id(4)
    if user['locate'] == 'buy_moon_lotus':
        item = db.get_items_id(5)
    if user['locate'] == 'buy_fire_pepper':
        item = db.get_items_id(6)

    if user['money'] >= item['price']*10:
        db.set_inventory(id, int(item['item_id']), 10)
        db.edit_money(id, int(item['price'])*10)
        user = db.get_me(id)
        text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: **{item['name']}** (10 —à—Ç.)"
        text_for_message = f"‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n"\
            f"{item['name']}\n"\
            f"‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ\n"\
            f"{item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
        bot.edit_message_text(text_for_message, id, call.message.message_id, reply_markup=kb.card_seeds_kb)
    else:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
    bot.answer_callback_query(call.id, text)

@bot.callback_query_handler(lambda call: call.data == 'rakes')
def rakes(call):
    id = call.from_user.id
    text = f'–ì—Ä–∞–±–ª–∏'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.rakes_kb)

@bot.callback_query_handler(lambda call: call.data == 'rakes_2')
def rakes_2(call):
    id = call.from_user.id 
    bot.edit_message_reply_markup(id, call.message.message_id, reply_markup=kb.rakes_2_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_wood_rake')
def buy_wood_rake(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_wood_rake')
    item = db.get_items_id(7)
    text =  f"ü™ì –î–ï–†–ï–í–Ø–ù–ù–´–ï –ì–†–ê–ë–õ–ò ü™ì\n"\
            f"‚îú üõ°Ô∏è –ü—Ä–æ—á–Ω–æ—Å—Ç—å: 20 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"\
            f"‚îî üí∞ –¶–µ–Ω–∞: {item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_rakes_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_iron_rake')
def buy_iron_rake(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_iron_rake')
    item = db.get_items_id(9)
    text =  f"üî® –ñ–ï–õ–ï–ó–ù–´–ï –ì–†–ê–ë–õ–ò üî®\n"\
            f"‚îú üöú –≠—Ñ—Ñ–µ–∫—Ç: +2 –∫ —É—Ä–æ–∂–∞—é —Å –≥—Ä—è–¥–∫–∏\n"\
            f"‚îú üõ°Ô∏è –ü—Ä–æ—á–Ω–æ—Å—Ç—å: 30 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"\
            f"‚îî üí∞ –¶–µ–Ω–∞: {item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_rakes_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_steel_rake')
def buy_steel_rake(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_steel_rake')
    item = db.get_items_id(8)
    text =  f"üîß –°–¢–ê–õ–¨–ù–´–ï –ì–†–ê–ë–õ–ò üîß\n"\
            f"‚îú üåü –≠—Ñ—Ñ–µ–∫—Ç: +3üçÖ –∫ —É—Ä–æ–∂–∞—é —Å –≥—Ä—è–¥–∫–∏\n"\
            f"‚îú üõ°Ô∏è –ü—Ä–æ—á–Ω–æ—Å—Ç—å: 40 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"\
            f"‚îî üí∞ –¶–µ–Ω–∞: {item['price']} –º–æ–Ω–µ—Ç\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_rakes_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_rain_rake')
def buy_rain_rake(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_rain_rake')
    item = db.get_items_id(10)
    text =  f"‚òî –ì–†–ê–ë–õ–ò –î–û–ñ–î–Ø ‚òî\n"\
            f"‚îú üåä –≠—Ñ—Ñ–µ–∫—Ç: 2x –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≥—Ä—è–¥–æ–∫\n"\
            f"‚îú ‚ö† –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: -1 –ø—Ä–æ—á–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–ª–∏–≤/—Å–±–æ—Ä\n"\
            f"‚îú üõ°Ô∏è –ü—Ä–æ—á–Ω–æ—Å—Ç—å: 50 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"\
            f"‚îú üí∞ –¶–µ–Ω–∞: \n"\
            f"‚îú ü™ô {item['price']} –º–æ–Ω–µ—Ç\n"\
            f"‚îî üíß 5 –º–æ–ª–µ–∫—É–ª –¥–æ–∂–¥—è\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_rakes_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_dreams_rake')
def buy_dreams_rake(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_dreams_rake')
    item = db.get_items_id(11)
    text =  f"‚ú® –ì–†–ê–ë–õ–ò –°–ù–û–í–ò–î–ï–ù–ò–ô ‚ú®\n"\
            f"‚îú üåô –≠—Ñ—Ñ–µ–∫—Ç: 2x —É—Ä–æ–∂–∞–π (22:00-8:00 –ú–°–ö)\n"\
            f"‚îú üõ°Ô∏è –ü—Ä–æ—á–Ω–æ—Å—Ç—å: 50 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"\
            f"‚îú üí∞ –¶–µ–Ω–∞: \n"\
            f"‚îú ü™ô {item['price']} –º–æ–Ω–µ—Ç\n"\
            f"‚îî üåø 5 —Å–Ω–æ–≤–∏–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ç—Ä–∞–≤—ã\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_rakes_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_quantum_rake')
def buy_quantum_rake(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    db.edit_locate(id, 'buy_quantum_rake')
    item = db.get_items_id(12)
    text =  f"üåå –ö–í–ê–ù–¢–û–í–´–ï –ì–†–ê–ë–õ–ò üåå\n"\
            f"‚îú ‚ö° –≠—Ñ—Ñ–µ–∫—Ç: 50% —à–∞–Ω—Å 2x —É—Ä–æ–∂–∞—è\n"\
            f"‚îú üõ°Ô∏è –ü—Ä–æ—á–Ω–æ—Å—Ç—å: 50 –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤\n"\
            f"‚îú üí∞ –¶–µ–Ω–∞: \n"\
            f"‚îú ü™ô {item['price']} –º–æ–Ω–µ—Ç\n"\
            f"‚îî ‚öõÔ∏è 5 –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –æ–±–ª–æ–º–æ–∫–æ–≤\n"\
            f"ü™ô –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user['money']}"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.card_rakes_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_rakes')
def buy_rakes(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_tool = db.get_rake(id)

    if user['locate'] == 'buy_wood_rake':
        item = db.get_items_id(7)
        resource = [0, 0] # ID —Ä–µ—Å—É—Ä—Å–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if user['locate'] == 'buy_iron_rake':
        item = db.get_items_id(9)
        resource = [0, 0]
    if user['locate'] == 'buy_steel_rake':
        item = db.get_items_id(8)
        resource = [0, 0]
    if user['locate'] == 'buy_rain_rake':
        item = db.get_items_id(10)
        resource = [13, 5]
    if user['locate'] == 'buy_dreams_rake':
        item = db.get_items_id(11)
        resource = [14, 5]
    if user['locate'] == 'buy_quantum_rake':
        item = db.get_items_id(12)
        resource = [15, 5]

    if user['money'] >= item['price']:
        if resource[0] == 13:
            if db.get_item_invetory(id, 13)['quantity'] < 5:
                text = f"‚ùå –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                bot.answer_callback_query(call.id, text)
                return
            else:
                db.remove_item_id(id, 13, 5)
        if resource[0] == 14:
            if db.get_item_invetory(id, 14)['quantity'] < 5:
                text = f"‚ùå –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                bot.answer_callback_query(call.id, text)
                return
            else:
                db.remove_item_id(id, 14, 5)
        if resource[0] == 15:
            if db.get_item_invetory(id, 15)['quantity'] < 5:
                text = f"‚ùå –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                bot.answer_callback_query(call.id, text)
                return
            else:
                db.remove_item_id(id, 15, 5)


        if not(user_tool):
            db.set_tool(id, int(item['item_id']), int(item['strength']))
            db.edit_money(id, int(item['price']))
            text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: **{item['name']}**"
            bot.answer_callback_query(call.id, text)
            text = f"üöú *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–µ—Ä–º–µ—Ä—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω!* üåæ\n"\
                    f"–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
            bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.shop_kb)
        else:
            text = f'–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≥—Ä–∞–±–ª–∏\n'\
                    f'{user_tool["name"]} \n'\
                    f'–ü—Ä–æ—á–Ω–æ—Å—Ç—å: {user_tool["strength"]}\n'\
                    f'–•–æ—á–µ—à—å –∏—Ö –∑–∞–º–µ–Ω–∏—Ç—å?'
            bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.replace_rakes_kb)
    else:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.answer_callback_query(call.id, text)

@bot.callback_query_handler(lambda call: call.data == 'replace_rake')
def replace_rake(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_tool = db.get_rake(id)

    if user['locate'] == 'buy_wood_rake':
        item = db.get_items_id(7)
        resource = [0, 0] # ID —Ä–µ—Å—É—Ä—Å–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if user['locate'] == 'buy_iron_rake':
        item = db.get_items_id(9)
        resource = [0, 0]
    if user['locate'] == 'buy_steel_rake':
        item = db.get_items_id(8)
        resource = [0, 0]
    if user['locate'] == 'buy_rain_rake':
        item = db.get_items_id(10)
        resource = [13, 5]
    if user['locate'] == 'buy_dreams_rake':
        item = db.get_items_id(11)
        resource = [14, 5]
    if user['locate'] == 'buy_quantum_rake':
        item = db.get_items_id(12)
        resource = [15, 5]
    
    if user['money'] >= item['price']:
        if resource[0] == 13:
            if db.get_item_invetory(id, 13)['quantity'] < 5:
                text = f"‚ùå –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                bot.answer_callback_query(call.id, text)
                return
            else:
                db.remove_item_id(id, 13, 5)
        if resource[0] == 14:
            if db.get_item_invetory(id, 14)['quantity'] < 5:
                text = f"‚ùå –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                bot.answer_callback_query(call.id, text)
                return
            else:
                db.remove_item_id(id, 14, 5)
        if resource[0] == 15:
            if db.get_item_invetory(id, 15)['quantity'] < 5:
                text = f"‚ùå –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                bot.answer_callback_query(call.id, text)
                return
            else:
                db.remove_item_id(id, 15, 5)
        
        db.remove_tool(id, user_tool['tool_id'])
        db.set_tool(id, int(item['item_id']), int(item['strength']))
        db.edit_money(id, int(item['price']))
        text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: **{item['name']}**"
        bot.answer_callback_query(call.id, text)
        text = f"üöú *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–µ—Ä–º–µ—Ä—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω!* üåæ\n"\
                f"–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.shop_kb)
    else:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.answer_callback_query(call.id, text)


@bot.message_handler(commands=['farm'])
def farm(message):
    id = message.from_user.id
    db = Database()
    user = db.get_me(id)

    if user['locate'] == 'training':
        bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
        return
    
    user_farm = db.get_farm(id)
    text = f"üåª –¢–≤–æ—è —Ñ–µ—Ä–º–∞:\n"\
            f'–í—ã–±–µ—Ä–∏ –≥—Ä—è–¥–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'
    bot.send_message(id, text, reply_markup=kb.make_beds(user_farm['amount_beds'])[0])

@bot.callback_query_handler(lambda call: call.data == 'farm')
def farm(call):
    id = call.from_user.id
    db = Database()
    user_farm = db.get_farm(id)
    text = f"üåª –¢–≤–æ—è —Ñ–µ—Ä–º–∞:\n"\
            f'–í—ã–±–µ—Ä–∏ –≥—Ä—è–¥–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.make_beds(user_farm['amount_beds'])[0])

@bot.callback_query_handler(lambda call: call.data == 'buy_bed')
def buy_bed(call):
    id = call.from_user.id 
    db = Database()
    user_farm = db.get_farm(id)
    text = f"üå± –¶–µ–Ω–∞ –Ω–æ–≤–æ–π –≥—Ä—è–¥–∫–∏: {PRICE_BUY_BEDS[user_farm['amount_beds']]} –º–æ–Ω–µ—Ç"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.buy_beds_kb)

@bot.callback_query_handler(lambda call: call.data == 'buy_new_bed')
def buy_new_bed(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_farm = db.get_farm(id)
    price = PRICE_BUY_BEDS[user_farm['amount_beds']]

    if user['money'] >= price:
        text = f"üÜï –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! –ù–æ–≤–∞—è –≥—Ä—è–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞."
        db.edit_farm(id)
        db.set_bed(id, user_farm['amount_beds']+1)
        db.edit_money(id, price)
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_beds)
    else:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_beds)

@bot.callback_query_handler(lambda call: call.data == 'beds')
def beds(call):
    id = call.from_user.id
    db = Database()
    user_farm = db.get_farm(id)
    text = f"üåª –¢–≤–æ—è —Ñ–µ—Ä–º–∞:\n"\
            f'–í—ã–±–µ—Ä–∏ –≥—Ä—è–¥–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.make_beds(user_farm['amount_beds'])[0])

@bot.callback_query_handler(lambda call: call.data == 'beds_2')
def beds_2(call):
    id = call.from_user.id
    db = Database()
    user_farm = db.get_farm(id)
    bot.edit_message_reply_markup(id, call.message.message_id, reply_markup=kb.make_beds(user_farm['amount_beds'])[1])

@bot.callback_query_handler(lambda call: call.data == 'bed_1')
def bed_1(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_1')
    user_bed = db.get_bed(id, 1)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 1, 0, 0, 0, 0)

    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ1] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"
    
    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 1, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
            
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)
    
    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

@bot.callback_query_handler(lambda call: call.data == 'bed_2')
def bed_2(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_2')
    user_bed = db.get_bed(id, 2)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 2, 0, 0, 0, 0)

    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ2] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"

    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 2, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
            
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)
    
    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

@bot.callback_query_handler(lambda call: call.data == 'bed_3')
def bed_3(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_3')
    user_bed = db.get_bed(id, 3)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 3, 0, 0, 0, 0)

    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ3] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"

    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 3, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
            
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)

    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

@bot.callback_query_handler(lambda call: call.data == 'bed_4')
def bed_4(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_4')
    user_bed = db.get_bed(id, 4)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 4, 0, 0, 0, 0)

    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ4] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"

    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 4, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
            
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)

    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

@bot.callback_query_handler(lambda call: call.data == 'bed_5')
def bed_5(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_5')
    user_bed = db.get_bed(id, 5)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 5, 0, 0, 0, 0)

    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ5] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"

    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 5, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
            
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)

    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

@bot.callback_query_handler(lambda call: call.data == 'bed_6')
def bed_6(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_6')
    user_bed = db.get_bed(id, 6)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 6, 0, 0, 0, 0)

    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ6] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"

    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 6, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
            
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)

    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

@bot.callback_query_handler(lambda call: call.data == 'bed_7')
def bed_7(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_7')
    user_bed = db.get_bed(id, 7)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 7, 0, 0, 0, 0)

    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ7] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"

    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 7, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)

    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

@bot.callback_query_handler(lambda call: call.data == 'bed_8')
def bed_8(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_8')
    user_bed = db.get_bed(id, 8)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 8, 0, 0, 0, 0)
    
    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ8] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"

    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 8, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)

    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

@bot.callback_query_handler(lambda call: call.data == 'bed_9')
def bed_9(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_9')
    user_bed = db.get_bed(id, 9)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 9, 0, 0, 0, 0)

    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ9] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"

    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 9, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
            
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)

    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

@bot.callback_query_handler(lambda call: call.data == 'bed_10')
def bed_10(call):
    id = call.from_user.id
    db = Database()
    db.edit_locate(id, 'bed_10')
    user_bed = db.get_bed(id, 10)
    user_tool = db.get_rake(id)
    if user_bed['state'] == 3:
        if gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours']) != 0:
            user_bed['state'] = 1
        else:
            db.set_seeds_bed(id, 10, 0, 0, 0, 0)

    text = f"‚öîÔ∏è [–ì—Ä—è–¥–∫–∞ ‚Ññ10] ‚öîÔ∏è\n"\
            f"‚ñ∏ üéØ –õ—É–Ω–æ–∫: {user_bed['holes']}\n"
    
    if user_tool != None: 
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: {user_tool['name']} (üõ°Ô∏è {user_tool['strength']})\n"
    else:
        text += f"üõ†Ô∏è –ì—Ä–∞–±–ª–∏: ‚ùå –ù–µ—Ç\n"

    if user_bed['state'] == 0:
        text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ\n"\
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)

    if user_bed['state'] == 1:
        time_left = gl.calculate_end_time(user_bed['time_end'])
        if time_left == True:
            db.set_state_bed(id, 10, 2)
            text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_2_kb)
        else:
            text += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–æ—Å–∞–∂–µ–Ω–æ\n" \
                    f"üåø –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n" \
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
            bot.edit_message_text(text, id, call.message.message_id, 
                              reply_markup=kb.bed_state_1(time_left))
            
    if user_bed['state'] == 2:
        text += f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å\n"\
                    f"üå± –ß—Ç–æ —Ä–∞—Å—Ç–µ—Ç: {user_bed['name']}\n"\
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_2_kb)
    
    if user_bed['state'] == 3:
        text += f"üíÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–∞—Å–æ—Ö–ª–æ!\n" \
                f"‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {gl.calculate_precent_water(user_bed['time_end_watering'], user_bed['watering_hours'])}%"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.bed_state_0_kb)


@bot.callback_query_handler(lambda call: call.data == 'set_seeds')
def set_seeds(call):
    id = call.from_user.id
    db = Database()
    user_locate = db.get_me(id)['locate']
    user_bed = db.get_bed(id, user_locate[4:])
    user_inventory = db.get_item_inventory_type(id, '—Å–µ–º–µ–Ω–∞')
    text = f"üå± –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–∞–¥–∏—Ç—å:\n" \
            f"üî¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–µ–º—è–Ω: {user_bed['holes']} —à—Ç."
    
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.select_set_seeds(user_inventory, user_locate))
    
@bot.callback_query_handler(lambda call: call.data == 'set_seeds_1')
def set_seeds_1(call):
    id = call.from_user.id 
    db = Database()
    user = db.get_me(id)
    user_farm = db.get_farm(id)
    user_locate = int(db.get_me(id)['locate'][4:])
    user_bed = db.get_bed(id, user_locate)
    user_inventory = db.get_item_invetory(id, 1)
    end_time = gl.end_time(growth_minutes=10)

    if gl.has_time_passed(user['buster_x10_time_all']):
        end_time = gl.end_time(growth_minutes=1)

    if user_inventory['quantity'] >= user_bed['holes']:
        if gl.random_chance_resistance(user_bed['chance_resistance']) and user_farm != 29:
            db.set_seeds_bed(id, user_locate, 1, 1, end_time, 1)
        else:
            db.set_seeds_bed(id, user_locate, 1, 1, end_time, 0)

        if user_farm['buster'] == 29:
            db.set_seeds_bed(id, user_locate, 1, 1, end_time, 0)
            db.used_buster(id, 0)

        if gl.compare_times(str(user_bed['time_end_watering']), str(db.get_bed(id, user_locate)['time_end'])):
            db.set_state_bed(id, user_locate, 3)

        db.remove_item_id(id, 1, user_bed['holes'])
        text = f"ü™¥ {user_inventory['name']} —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–∞–∂–µ–Ω—ã!\n" 
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_beds)
    else:
        text = f"‚ùå –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–µ–º—è–Ω!\n" \
                f"–ù—É–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫—É–ª—å—Ç—É—Ä—É"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_select_set_seeds)

@bot.callback_query_handler(lambda call: call.data == 'set_seeds_2')
def set_seeds_2(call):
    id = call.from_user.id 
    db = Database()
    user = db.get_me(id)
    user_farm = db.get_farm(id)
    user_locate = int(db.get_me(id)['locate'][4:])
    user_bed = db.get_bed(id, user_locate)
    user_inventory = db.get_item_invetory(id, 2)
    end_time = gl.end_time(growth_minutes=20)

    if gl.has_time_passed(user['buster_x10_time_all']):
        end_time = gl.end_time(growth_minutes=2)

    if user_inventory['quantity'] >= user_bed['holes']:
        if gl.random_chance_resistance(user_bed['chance_resistance']) and user_farm != 29:
            db.set_seeds_bed(id, user_locate, 1, 2, end_time, 1)
        else:
            db.set_seeds_bed(id, user_locate, 1, 2, end_time, 0)

        if user_farm['buster'] == 29:
            db.set_seeds_bed(id, user_locate, 1, 2, end_time, 0)
            db.used_buster(id, 0)

        if gl.compare_times(str(user_bed['time_end_watering']), str(db.get_bed(id, user_locate)['time_end'])):
            db.set_state_bed(id, user_locate, 3)

        db.remove_item_id(id, 2, user_bed['holes'])
        text = f"ü™¥ {user_inventory['name']} —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–∞–∂–µ–Ω—ã!\n"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_beds)
    else:
        text = f"‚ùå –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–µ–º—è–Ω!\n" \
                f"–ù—É–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫—É–ª—å—Ç—É—Ä—É"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_select_set_seeds)

@bot.callback_query_handler(lambda call: call.data == 'set_seeds_3')
def set_seeds_3(call):
    id = call.from_user.id 
    db = Database()
    user = db.get_me(id)
    user_farm = db.get_farm(id)
    user_locate = int(db.get_me(id)['locate'][4:])
    user_bed = db.get_bed(id, user_locate)
    user_inventory = db.get_item_invetory(id, 3)
    end_time = gl.end_time(growth_minutes=30)

    if gl.has_time_passed(user['buster_x10_time_all']):
        end_time = gl.end_time(growth_minutes=3)

    if user_inventory['quantity'] >= user_bed['holes']:
        if gl.random_chance_resistance(user_bed['chance_resistance']) and user_farm != 29:
            db.set_seeds_bed(id, user_locate, 1, 3, end_time, 1)
        else:
            db.set_seeds_bed(id, user_locate, 1, 3, end_time, 0)

        if user_farm['buster'] == 29:
            db.set_seeds_bed(id, user_locate, 1, 3, end_time, 0)
            db.used_buster(id, 0)

        if gl.compare_times(str(user_bed['time_end_watering']), str(db.get_bed(id, user_locate)['time_end'])):
            db.set_state_bed(id, user_locate, 3)

        db.remove_item_id(id, 3, user_bed['holes'])
        text = f"ü™¥ {user_inventory['name']} —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–∞–∂–µ–Ω—ã!\n"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_beds)
    else:
        text = f"‚ùå –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–µ–º—è–Ω!\n" \
                f"–ù—É–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫—É–ª—å—Ç—É—Ä—É"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_select_set_seeds)

@bot.callback_query_handler(lambda call: call.data == 'set_seeds_4')
def set_seeds_4(call):
    id = call.from_user.id 
    db = Database()
    user = db.get_me(id)
    user_farm = db.get_farm(id)
    user_locate = int(db.get_me(id)['locate'][4:])
    user_bed = db.get_bed(id, user_locate)
    user_inventory = db.get_item_invetory(id, 4)
    end_time = gl.end_time(growth_minutes=45)

    if gl.has_time_passed(user['buster_x10_time_all']):
        end_time = gl.end_time(growth_minutes=5)

    if user_inventory['quantity'] >= user_bed['holes']:
        if gl.random_chance_resistance(user_bed['chance_resistance']) and user_farm != 29:
            db.set_seeds_bed(id, user_locate, 1, 4, end_time, 1)
        else:
            db.set_seeds_bed(id, user_locate, 1, 4, end_time, 0)

        if user_farm['buster'] == 29:
            db.set_seeds_bed(id, user_locate, 1, 4, end_time, 0)
            db.used_buster(id, 0)

        if gl.compare_times(str(user_bed['time_end_watering']), str(db.get_bed(id, user_locate)['time_end'])):
            db.set_state_bed(id, user_locate, 3)

        db.remove_item_id(id, 4, user_bed['holes'])
        text = f"ü™¥ {user_inventory['name']} —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–∞–∂–µ–Ω—ã!\n"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_beds)
    else:
        text = f"‚ùå –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–µ–º—è–Ω!\n" \
                f"–ù—É–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫—É–ª—å—Ç—É—Ä—É"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_select_set_seeds)

@bot.callback_query_handler(lambda call: call.data == 'set_seeds_5')
def set_seeds_5(call):
    id = call.from_user.id 
    db = Database()
    user = db.get_me(id)
    user_farm = db.get_farm(id)
    user_locate = int(db.get_me(id)['locate'][4:])
    user_bed = db.get_bed(id, user_locate)
    user_inventory = db.get_item_invetory(id, 5)
    end_time = gl.end_time(growth_hours=4)

    if gl.has_time_passed(user['buster_x10_time_all']):
        end_time = gl.end_time(growth_minutes=24)

    if user_inventory['quantity'] >= user_bed['holes']:
        if gl.random_chance_resistance(user_bed['chance_resistance']) and user_farm != 29:
            db.set_seeds_bed(id, user_locate, 1, 5, end_time, 1)
        else:
            db.set_seeds_bed(id, user_locate, 1, 5, end_time, 0)

        if user_farm['buster'] == 29:
            db.set_seeds_bed(id, user_locate, 1, 5, end_time, 0)
            db.used_buster(id, 0)

        if gl.compare_times(str(user_bed['time_end_watering']), str(db.get_bed(id, user_locate)['time_end'])):
            db.set_state_bed(id, user_locate, 3)

        db.remove_item_id(id, 5, user_bed['holes'])
        text = f"ü™¥ {user_inventory['name']} —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–∞–∂–µ–Ω—ã!\n"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_beds)
    else:
        text = f"‚ùå –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–µ–º—è–Ω!\n" \
                f"–ù—É–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫—É–ª—å—Ç—É—Ä—É"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_select_set_seeds)

@bot.callback_query_handler(lambda call: call.data == 'set_seeds_6')
def set_seeds_6(call):
    id = call.from_user.id 
    db = Database()
    user = db.get_me(id)
    user_farm = db.get_farm(id)
    user_locate = int(db.get_me(id)['locate'][4:])
    user_bed = db.get_bed(id, user_locate)
    user_inventory = db.get_item_invetory(id, 6)
    end_time = gl.end_time(growth_hours=2, growth_minutes=30)

    if gl.has_time_passed(user['buster_x10_time_all']):
        end_time = gl.end_time(growth_minutes=15)

    if user_inventory['quantity'] >= user_bed['holes']:
        if gl.random_chance_resistance(user_bed['chance_resistance']):
            db.set_seeds_bed(id, user_locate, 1, 6, end_time, 1)
        else:
            db.set_seeds_bed(id, user_locate, 1, 6, end_time, 0)

        if user_farm['buster'] == 29:
            db.set_seeds_bed(id, user_locate, 1, 6, end_time, 0)
            db.used_buster(id, 0)
        
        if gl.compare_times(str(user_bed['time_end_watering']), str(db.get_bed(id, user_locate)['time_end'])):
            db.set_state_bed(id, user_locate, 3)

        db.remove_item_id(id, 6, user_bed['holes'])
        text = f"ü™¥ {user_inventory['name']} —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–∞–∂–µ–Ω—ã!\n"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_beds)
    else:
        text = f"‚ùå –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–µ–º—è–Ω!\n" \
                f"–ù—É–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫—É–ª—å—Ç—É—Ä—É"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_select_set_seeds)

@bot.callback_query_handler(lambda call: call.data == 'get_harvest')
def get_harvest(call):
    id = call.from_user.id
    db = Database()
    user_farm = db.get_farm(id)
    user_tool = db.get_tool_rake(id)
    user_locate = db.get_me(id)['locate']
    user_bed = db.get_bed(id, int(user_locate[4:]))
    item_harvest = db.get_items_id(HARVEST[user_bed['id_planted']])
    resource = gl.random_resource()
    tasks = db.get_tasks(id)


    if user_tool == None:
        text = f"üö´ –û—à–∏–±–∫–∞: –ù–µ—Ç –≥—Ä–∞–±–ª–µ–π!\n" \
                f"–ß—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π, —Ç–µ–±–µ –Ω—É–∂–Ω—ã –≥—Ä–∞–±–ª–∏"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))
        return
    else:
        user_tool = user_tool['tool_id']
        db.set_seeds_bed(id, int(user_locate[4:]), 0, 0, '0', 0)
        if user_bed['resistance'] == 1:
            text = f"üíÄ –ü–æ—á–≤–∞ –∑–∞–±–æ–ª–µ–ª–∞ - —É—Ä–æ–∂–∞–π –ø–æ–≥–∏–±!\n" \
                    f"üò¢ –û—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã—Ä–æ—Å–ª–æ..."
            bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))
            return
        else:
            if user_farm['buster'] == 28:
                buster = 2
                db.used_buster(id, 0)
            else:
                buster = 1
            quantity = 0
            if user_tool == 7:
                quantity = int(user_bed['holes'])
                text = f"‚ú® –£—Ä–æ–∂–∞–π! ‚ú®\n–°–æ–±—Ä–∞–Ω–æ {quantity*buster} {item_harvest['name']}"
                db.set_inventory(id, item_harvest['item_id'], quantity*buster)
                bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))
            if user_tool == 8:
                quantity = int(user_bed['holes']) + 3
                text = f"‚ú® –£—Ä–æ–∂–∞–π! ‚ú®\n–°–æ–±—Ä–∞–Ω–æ {quantity*buster} {item_harvest['name']}"
                db.set_inventory(id, item_harvest['item_id'], quantity*buster)
                bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))
            if user_tool == 9:
                quantity = int(user_bed['holes']) + 2
                text = f"‚ú® –£—Ä–æ–∂–∞–π! ‚ú®\n–°–æ–±—Ä–∞–Ω–æ {quantity*buster} {item_harvest['name']}"
                db.set_inventory(id, item_harvest['item_id'], quantity*buster)
                bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))
            if user_tool == 10:
                quantity = int(user_bed['holes'])
                text = f"‚ú® –£—Ä–æ–∂–∞–π! ‚ú®\n–°–æ–±—Ä–∞–Ω–æ {quantity*buster} {item_harvest['name']}"
                db.set_inventory(id, item_harvest['item_id'], quantity*buster)
                bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))
            if user_tool == 11:
                if gl.is_night_time():
                    quantity = int(user_bed['holes'])*2
                else:
                    quantity = int(user_bed['holes'])
                text = f"‚ú® –£—Ä–æ–∂–∞–π! ‚ú®\n–°–æ–±—Ä–∞–Ω–æ {quantity*buster} {item_harvest['name']}"
                db.set_inventory(id, item_harvest['item_id'], quantity*buster)
                bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))
            if user_tool == 12:
                if gl.random_chance():
                    quantity = int(user_bed['holes'])*2
                    text = f"‚ú® –£—Ä–æ–∂–∞–π! ‚ú®\n–°–æ–±—Ä–∞–Ω–æ {quantity*buster} {item_harvest['name']}"
                    db.set_inventory(id, item_harvest['item_id'], quantity*buster)
                    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))
                else:
                    quantity = int(user_bed['holes'])
                    text = f"‚ú® –£—Ä–æ–∂–∞–π! ‚ú®\n–°–æ–±—Ä–∞–Ω–æ {quantity*buster} {item_harvest['name']}"
                    db.set_inventory(id, item_harvest['item_id'], quantity*buster)
                    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))
            if resource != None:
                resource_info = db.get_items_id(resource)
                text_2 = f"‚ú® –£–¥–∞—á–∞! –ü—Ä–∏ —Å–±–æ—Ä–µ —É—Ä–æ–∂–∞—è —Ç—ã –Ω–∞—à—ë–ª:\n" \
                        f"1 {resource_info['name']} (—Ä–µ–¥–∫–∏–π —Ä–µ—Å—É—Ä—Å!)"
                bot.answer_callback_query(call.id, text_2)
                db.set_inventory(id, resource)

            db.edit_tool(id, user_tool)

            if tasks['plant1'] == item_harvest['item_id'] and tasks['task1_completed'] != -1:
                db.update_completed_task(id, 1, quantity*buster)
            if tasks['plant2'] == item_harvest['item_id'] and tasks['task2_completed'] != -1:
                db.update_completed_task(id, 2, quantity*buster)

@bot.callback_query_handler(lambda call: call.data == 'watering')
def watering(call):
    id = call.from_user.id 
    db = Database()
    user_farm = db.get_farm(id)
    user_locate = db.get_me(id)['locate']
    user_bed = db.get_bed(id, user_locate[4:])
    user_tool = db.get_tool_rake(id)

    text = f'–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–∏–ª –≥—Ä—è–¥–∫—É'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_get_harvest(user_locate))

    if user_farm['buster'] == 27:
        db.watering_bed(id, user_locate[4:], gl.end_time(24))
        db.used_buster(id, 0)
        return
    if user_tool != None:
        if user_tool['tool_id'] == 10:
            db.watering_bed(id, user_locate[4:], gl.end_time(int(user_bed['watering_hours'])*2))
            return
    
    db.watering_bed(id, user_locate[4:], gl.end_time(user_bed['watering_hours']))
        
    if user_bed['state'] == 3:
        db.set_state_bed(id, user_locate[4:], 1)



@bot.callback_query_handler(lambda call: call.data == 'upgrade_bed')
def upgrade_bed(call):
    id = call.from_user.id 
    db = Database()
    user_locate = db.get_me(id)['locate']
    text = f"üõ†Ô∏è –í—ã–±–µ—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–µ:\n"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.upgrade_bed(user_locate))


@bot.callback_query_handler(lambda call: call.data == 'disease_resistance')
def disease_resistance(call):
    id = call.from_user.id
    db = Database()
    user_locate = db.get_me(id)['locate']
    user_bed = db.get_bed(id, user_locate[4:])
    items_for_upgrade = PRICE_UPGRADE_DISEASE_RESISTANCE[user_bed['chance_resistance']]
    text = f"üå± –ò–ú–ú–£–ù–ò–¢–ï–¢ –ì–†–Ø–î–ö–ò üå±\n\n"\
            f"–¢–µ–∫—É—â–∞—è –∑–∞—â–∏—Ç–∞: \n"\
            f"‚ò£Ô∏è –†–∏—Å–∫ –±–æ–ª–µ–∑–Ω–∏: {user_bed['chance_resistance']}%\n"\
            f"‚û° –ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {user_bed['chance_resistance']-1}%\n\n"\
            f"üì¶ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n"\
            f"üí∞ {items_for_upgrade[0]} –º–æ–Ω–µ—Ç\n"\
            f"üåø {items_for_upgrade[1]} –ª–µ—á–µ–±–Ω–æ–π —Ç—Ä–∞–≤—ã\n\n"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.disease_resistance_kb)

@bot.callback_query_handler(lambda call: call.data == 'upgrade_disease_resistance')
def upgrade_disease_resistance(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_inventory = db.get_item_invetory(id, 22)
    user_bed = db.get_bed(id, user['locate'][4:])
    items_for_upgrade = PRICE_UPGRADE_DISEASE_RESISTANCE[user_bed['chance_resistance']]

    if user_inventory == None:
        user_inventory = {'quantity': 0}

    if user['money'] >= items_for_upgrade[0] and user_inventory['quantity'] >= items_for_upgrade[1]:
        text = f'"–ì—Ä—è–¥–∫–∞ —É–ª—É—á—à–µ–Ω–∞! ‚úîÔ∏èüå±"'
        db.upgrade_disease_resistance(id, user['locate'][4:])
        db.edit_money(id, items_for_upgrade[0])
        db.remove_item_id(id, 22, items_for_upgrade[1])
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_to_upgrade_kb)
    else:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤..."
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_to_upgrade_kb)

@bot.callback_query_handler(lambda call: call.data == 'reducing_soil')
def reducing_soil(call):
    id = call.from_user.id
    db = Database()
    user_locate = db.get_me(id)['locate']
    user_bed = db.get_bed(id, user_locate[4:])
    items_for_upgrade = PRICE_UPGRADE_TIME_WATERING[user_bed['watering_hours']]
    text = f"üîß –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–∏–≤–∞\n"\
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"\
            f"–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"\
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user_bed['watering_hours']} —á\n\n"\
            f"–ü–æ—Å–ª–µ –∞–ø–≥—Ä–µ–π–¥–∞:\n"\
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: +1 —á (–≤—Å–µ–≥–æ {user_bed['watering_hours']+1} —á)\n\n"\
            f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:\n"\
            f"‚ñ∏ {items_for_upgrade[0]} –º–æ–Ω–µ—Ç\n"\
            f"‚ñ∏ {items_for_upgrade[1]} –º–æ–ª–µ–∫—É–ª –≤–æ–¥—ã"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.reducing_soil_kb)
    
@bot.callback_query_handler(lambda call: call.data == 'upgrade_reducing_soil')
def upgrade_reducing_soil(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_inventory = db.get_item_invetory(id, 13)
    user_bed = db.get_bed(id, user['locate'][4:])
    items_for_upgrade = PRICE_UPGRADE_TIME_WATERING[user_bed['watering_hours']]

    if user_inventory == None:
        user_inventory = {'quantity': 0}

    if user['money'] >= items_for_upgrade[0] and user_inventory['quantity'] >= items_for_upgrade[1]:
        text = f'"–ì—Ä—è–¥–∫–∞ —É–ª—É—á—à–µ–Ω–∞! ‚úîÔ∏èüå±"'
        db.upgrade_disease_resistance(id, user['locate'][4:])
        db.edit_money(id, items_for_upgrade[0])
        db.remove_item_id(id, 13, items_for_upgrade[1])
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_to_upgrade_kb)
    else:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤..."
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_to_upgrade_kb)


@bot.callback_query_handler(lambda call: call.data == 'up_number_holes')
def up_number_holes(call):
    id = call.from_user.id
    db = Database()
    user_money = db.get_me(id)['money']
    user_locate = db.get_me(id)['locate']
    user_bed = db.get_bed(id, user_locate[4:])
    text =  f"‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª—É–Ω–∫–∞\n"\
            f"üíµ –¶–µ–Ω–∞: {round(user_bed['last_price_added_holes']*1.1)}\n"\
            f"üëõ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_money}\n"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.added_holes_kb)


@bot.callback_query_handler(lambda call: call.data == 'added_holes')
def added_holes(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_bed = db.get_bed(id, user['locate'][4:])
    price = round(user_bed['last_price_added_holes']*1.1)

    if user['money'] >= price:
        text = f'"–ì—Ä—è–¥–∫–∞ —É–ª—É—á—à–µ–Ω–∞! ‚úîÔ∏èüå±"'
        db.added_holes(id, user['locate'][4:], price)
        db.edit_money(id, price)
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_to_upgrade_kb)
    else:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_to_upgrade_kb)


@bot.callback_query_handler(lambda call: call.data == 'box')
def box(call):
    id = call.from_user.id 
    db = Database()
    user_inventory = db.get_item_inventory_type(id, '–±–æ–∫—Å')
    text = f'üéÅ–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π –±–æ–∫—Å —Ö–æ—á–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å:'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.open_box(user_inventory))

@bot.callback_query_handler(lambda call: call.data == 'box_23')
def box_23(call):
    id = call.from_user.id 
    db = Database()
    text =  f"üì¶ *–û–ë–´–ß–ù–´–ô –Ø–©–ò–ö* üì¶\n"\
            f"‚ñ´Ô∏è –ú–æ–Ω–µ—Ç—ã: 50-100\n"\
            f"‚ñ´Ô∏è –ü—à–µ–Ω–∏—Ü–∞: 2-5\n"\
            f"‚ñ´Ô∏è –ú–æ–∫—Ä–æ–≤—å: 2-5\n"\
            f"‚ñ´Ô∏è –ö—É–∫—É—Ä—É–∑–∞: 2-5\n"\
            f"‚ñ´Ô∏è –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å: 2-5\n"
    db.edit_locate(id, 'box_23')
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.open_box_kb)

@bot.callback_query_handler(lambda call: call.data == 'box_24')
def box_24(call):
    id = call.from_user.id 
    db = Database()
    text = f"üîÆ *–†–ï–î–ö–ò–ô –Ø–©–ò–ö* üîÆ\n"\
            f"‚ñ´Ô∏è –ú–æ–Ω–µ—Ç—ã: 100-200\n"\
            f"‚ñ´Ô∏è –ö—É–∫—É—Ä—É–∑–∞: 5-10\n"\
            f"‚ñ´Ô∏è –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å: 5-10\n"\
            f"‚ñ´Ô∏è –õ—É–Ω–Ω—ã–π –ª–æ—Ç–æ—Å: 1-2\n"\
            f"‚ñ´Ô∏è –û–≥–Ω–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ü: 1-2"
    db.edit_locate(id, 'box_24')
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.open_box_kb)

@bot.callback_query_handler(lambda call: call.data == 'box_25')
def box_25(call):
    id = call.from_user.id 
    db = Database()
    text = f"üíé *–≠–ü–ò–ß–ï–°–ö–ò–ô –Ø–©–ò–ö* üíé\n"\
            f"‚ñ´Ô∏è –ú–æ–Ω–µ—Ç—ã: 300-500\n"\
            f"‚ñ´Ô∏è –õ–µ—á–µ–±–Ω–∞—è —Ç—Ä–∞–≤–∞: 1-2\n"\
            f"‚ñ´Ô∏è –ú–æ–ª–µ–∫—É–ª–∞ –¥–æ–∂–¥—è: 1-2\n"\
            f"‚ñ´Ô∏è –°–Ω–æ–≤–∏–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç—Ä–∞–≤–∞: 1-2\n"\
            f"‚ñ´Ô∏è –ö–≤–∞–Ω—Ç–æ–≤—ã–π –æ–±–ª–æ–º–æ–∫: 1-2"
    db.edit_locate(id, 'box_25')
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.open_box_kb)

@bot.callback_query_handler(lambda call: call.data == 'box_26')
def box_26(call):
    id = call.from_user.id 
    db = Database()
    text = f"‚ú® *–õ–ï–ì–ï–ù–î–ê–†–ù–´–ô –Ø–©–ò–ö* ‚ú®\n"\
            f"‚ñ´Ô∏è –ú–æ–Ω–µ—Ç—ã: 1000-1500\n"\
            f"‚ñ´Ô∏è –ë—É—Å—Ç–µ—Ä '–û—Ç–∫–∞–∑ –æ—Ç –≤–æ–¥—ã': 1\n"\
            f"‚ñ´Ô∏è –ë—É—Å—Ç–µ—Ä '–£–¥–≤–æ–µ–Ω–Ω—ã–π —É—Ä–æ–∂–∞–π': 1\n"\
            f"‚ñ´Ô∏è –ë—É—Å—Ç–µ—Ä '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ–ª–µ–∑–Ω–µ–π': 1\n"\
            f"‚ñ´Ô∏è –ó–æ–ª–æ—Ç–∞—è –º–æ–Ω–µ—Ç–∞: 1-10"
    db.edit_locate(id, 'box_26')
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.open_box_kb)


@bot.callback_query_handler(lambda call: call.data == 'open_box')
def open_box(call):
    id = call.from_user.id 
    db = Database()
    user_locate = db.get_me(id)['locate']
    box = gl.open_box(int(user_locate[4:]))
    
    if box['id'] != 0 and box['id'] != -1:
        db.set_inventory(id, box['id'], box['quantity'])
    if box['id'] == -1:
        db.add_gold_money(id, box['quantity'])
    if box['id'] == 0:
        db.add_money(id, box['quantity'])

    db.remove_item_id(id, int(user_locate[4:]), 1)

    text = f"‚ú®‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú®\n"\
            f"      üéâ –¢–í–û–Ø –ù–ê–ì–†–ê–î–ê! üéâ\n"\
            f"‚ú®‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú®\n"\
            f"üéÅ {box['item']} √ó{box['quantity']}\n"\
            f"‚ú®‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú®"
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_box_kb)


@bot.callback_query_handler(lambda call: call.data == 'busters')
def busters(call):
    id = call.from_user.id
    db = Database()
    user_farm = db.get_farm(id)
    buster = db.get_item_inventory_type(id, '–±—É—Å—Ç–µ—Ä')
    text = f'‚ú® –¢–≤–æ–∏ –±—É—Å—Ç–µ—Ä—ã  \n'
    if user_farm['buster'] != 0:
        info_buster = db.get_items_id(user_farm['buster'])
        text += f'‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {info_buster["name"]}'
    else:
        text += f'‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤  '
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.busters(buster))


@bot.callback_query_handler(lambda call: call.data == 'buster_27')
def buster_27(call):
    id = call.from_user.id
    db = Database()
    text = f'üíß –ë—É—Å—Ç–µ—Ä ¬´–û—Ç–∫–∞–∑ –æ—Ç –≤–æ–¥—ã¬ª  \n'\
            f'‚òÄÔ∏è –í–∞—à–∞ –≥—Ä—è–¥–∫–∞ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π\n'\
            f'‚è≥ –¶–µ–ª—ã–µ —Å—É—Ç–∫–∏ –±–µ–∑ –∑–∞–±–æ—Ç!'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.used_buster_kb)
    db.edit_locate(id, 'buster_27')

@bot.callback_query_handler(lambda call: call.data == 'buster_28')
def buster_28(call):
    id = call.from_user.id
    db = Database()
    text = f'üåæ –ë—É—Å—Ç–µ—Ä ¬´–£–¥–≤–æ–µ–Ω–Ω—ã–π —É—Ä–æ–∂–∞–π¬ª \n'\
            f'‚úß –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä –ø—Ä–∏–Ω–µ—Å—ë—Ç 2x —É—Ä–æ–∂–∞—è!'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.used_buster_kb)
    db.edit_locate(id, 'buster_28')

@bot.callback_query_handler(lambda call: call.data == 'buster_29')
def buster_29(call):
    id = call.from_user.id
    db = Database()
    text = f'üåø –ë—É—Å—Ç–µ—Ä ¬´–ò–º–º—É–Ω–∏—Ç–µ—Ç¬ª \n'\
            f'‚úß –°–ª–µ–¥—É—é—â–∞—è –ø–æ—Å–∞–¥–∫–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –±–æ–ª–µ–∑–Ω–µ–π!'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.used_buster_kb)
    db.edit_locate(id, 'buster_29')

@bot.callback_query_handler(lambda call: call.data == 'used_buster')
def used_buster(call):
    id = call.from_user.id
    db = Database()
    user_farm = db.get_farm(id)
    user_locate = db.get_me(id)['locate']
    info_buster = db.get_items_id(int(user_locate[7:]))
    if user_farm['buster'] == 0:
        db.used_buster(id, info_buster['item_id'])
        db.remove_item_id(id, info_buster['item_id'])
        text = f'‚úÖ–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {info_buster["name"]}'
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_busters_kb)
    else:
        text = f'‚ùå–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –±—É—Å—Ç–µ—Ä'
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_busters_kb)


@bot.callback_query_handler(lambda call: call.data == 'casino')
def casino(call):
    id = call.from_user.id
    text = f'üé∞–¢—ã –ø–æ–ø–∞–ª –≤ –∫–∞–∑–∏–Ω–æ\n–ó–∞ –∫–∞–∫–æ–π —Å—Ç–æ–ª —Å—è–¥–µ—à—å? '
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.casino_kb)

@bot.callback_query_handler(lambda call: call.data == 'casino_back')
def casino_back(call):
    id = call.from_user.id
    text = f'üé∞–¢—ã –ø–æ–ø–∞–ª –≤ –∫–∞–∑–∏–Ω–æ\n–ó–∞ –∫–∞–∫–æ–π —Å—Ç–æ–ª —Å—è–¥–µ—à—å? '
    bot.delete_message(id, call.message.message_id)
    bot.send_message(id, text, reply_markup=kb.casino_kb)


@bot.callback_query_handler(lambda call: call.data == 'roulette')
def roulette(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    if user['money'] < 10:
        text = '‚ùå –¢–µ–±–µ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ 10 –º–æ–Ω–µ—Ç'
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
    else:
        db.set_casino(id)
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        photo = open('image/roulette.png', 'rb')
        bot.delete_message(id, call.message.message_id)
        bot.send_photo(id, photo, text, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_user_d2')
def bid_user_d2(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    if user_casino['bid'] / 2 < 10:
        text = '‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 –º–æ–Ω–µ—Ç'
        bot.answer_callback_query(call.id, text)
    else:
        db.update_bid(id, user_casino['bid'], '/ 2')
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_user_d10')
def bid_user_d10(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    if user_casino['bid'] / 10 < 10:
        text = '‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 –º–æ–Ω–µ—Ç'
        bot.answer_callback_query(call.id, text)
    else:
        db.update_bid(id, user_casino['bid'], '/ 10')
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_user_x2')
def bid_user_x2(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    if user['money'] < user_casino['bid'] * 2:
        text = f'‚ùå –£ —Ç–µ–±—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏'
        bot.answer_callback_query(call.id, text)
    else:
        db.update_bid(id, user_casino['bid'], '* 2')
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_user_x10')
def bid_user_x10(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    if user['money'] < user_casino['bid'] * 10:
        text = f'‚ùå –£ —Ç–µ–±—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏'
        bot.answer_callback_query(call.id, text)
    else:
        db.update_bid(id, user_casino['bid'], '* 10')
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)


@bot.callback_query_handler(lambda call: call.data == 'bid_1_12')
def bid_1_12(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    number = gl.roulette_random()
    
    if user['money'] < user_casino['bid'] or user['money'] < 10:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
        return

    text = f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}\n\n'
    if number >= 1 and number <= 12:
        db.add_money(id, user_casino['bid']*2)
        user = db.get_me(id)
        text += f"Ôºã –í—ã–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']*3} Ôºã\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)
    else:
        db.edit_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"‚Äï –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']} ‚Äï\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_13_24')
def bid_13_24(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    number = gl.roulette_random()
    
    if user['money'] < user_casino['bid'] or user['money'] < 10:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
        return

    text = f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}\n\n'
    if number >= 13 and number <= 24:
        db.add_money(id, user_casino['bid']*2)
        user = db.get_me(id)
        text += f"Ôºã –í—ã–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']*3} Ôºã\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)
    else:
        db.edit_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"‚Äï –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']} ‚Äï\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_25_36')
def bid_25_36(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    number = gl.roulette_random()
    
    if user['money'] < user_casino['bid'] or user['money'] < 10:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
        return

    text = f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}\n\n'
    if number >= 25 and number <= 36:
        db.add_money(id, user_casino['bid']*2)
        user = db.get_me(id)
        text += f"Ôºã –í—ã–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']*3} Ôºã\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)
    else:
        db.edit_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"‚Äï –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']} ‚Äï\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_black')
def bid_black(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    number = gl.roulette_random()

    if user['money'] < user_casino['bid'] or user['money'] < 10:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
        return

    text = f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}\n\n'
    if number in [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]:
        db.add_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"Ôºã –í—ã–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']*2} Ôºã\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)
    else:
        db.edit_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"‚Äï –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']} ‚Äï\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_red')
def bid_red(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    number = gl.roulette_random()

    if user['money'] < user_casino['bid'] or user['money'] < 10:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
        return

    text = f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}\n\n'
    if number in [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]:
        db.add_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"Ôºã –í—ã–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']*2} Ôºã\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)
    else:
        db.edit_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"‚Äï –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']} ‚Äï\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_even')
def bid_even(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    number = gl.roulette_random()

    if user['money'] < user_casino['bid'] or user['money'] < 10:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
        return

    text = f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}\n\n'
    if number % 2 == 0 and number != 0:
        db.add_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"Ôºã –í—ã–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']*2} Ôºã\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)
    else:
        db.edit_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"‚Äï –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']} ‚Äï\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_odd')
def bid_odd(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    number = gl.roulette_random()

    if user['money'] < user_casino['bid'] or user['money'] < 10:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
        return

    text = f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}\n\n'
    if number % 2 == 1:
        db.add_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"Ôºã –í—ã–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']*2} Ôºã\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)
    else:
        db.edit_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"‚Äï –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']} ‚Äï\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_zero')
def bid_zero(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    number = gl.roulette_random()

    if user['money'] < user_casino['bid'] or user['money'] < 10:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
        return

    text = f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}\n\n'
    if number == 0:
        db.add_money(id, user_casino['bid']*35)
        user = db.get_me(id)
        text += f"Ôºã –í—ã–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']*36} Ôºã\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)
    else:
        db.edit_money(id, user_casino['bid'])
        user = db.get_me(id)
        text += f"‚Äï –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_casino['bid']} ‚Äï\n" \
                f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ {user_casino['bid']} –º–æ–Ω–µ—Ç\n"\
                f"üí∞ {user['money']}"
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.roulette_kb)



@bot.callback_query_handler(lambda call: call.data == 'dice')
def dice(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    if user['money'] < 10:
        text = '–¢–µ–±–µ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ 10 –º–æ–Ω–µ—Ç'
        bot.delete_message(id, call.message.message_id)
        bot.send_message(id, text, reply_markup=kb.back_casino_kb)
    else:
        db.set_casino(id)
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.delete_message(id, call.message.message_id)
        bot.send_message(id, text, reply_markup=kb.dice_kb)

@bot.callback_query_handler(lambda call: call.data == 'dice_back')
def dice(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    if user['money'] < 10:
        text = '–¢–µ–±–µ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ 10 –º–æ–Ω–µ—Ç'
        bot.delete_message(id, call.message.message_id)
        bot.send_message(id, text, reply_markup=kb.back_casino_kb)
    else:
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.delete_message(id, call.message.message_id)
        bot.send_message(id, text, reply_markup=kb.dice_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_user_dice_d2')
def bid_user_dice_d2(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    if user_casino['bid'] / 2 < 10:
        text = '–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 –º–æ–Ω–µ—Ç'
        bot.answer_callback_query(call.id, text)
    else:
        db.update_bid(id, user_casino['bid'], '/ 2')
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.dice_kb)
    
@bot.callback_query_handler(lambda call: call.data == 'bid_user_dice_d10')
def bid_user_dice_d10(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    if user_casino['bid'] / 10 < 10:
        text = '–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 –º–æ–Ω–µ—Ç'
        bot.answer_callback_query(call.id, text)
    else:
        db.update_bid(id, user_casino['bid'], '/ 10')
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.dice_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_user_dice_x2')
def bid_user_dice_x2(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    if user['money'] < user_casino['bid'] * 2:
        text = f'–£ —Ç–µ–±—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏'
        bot.answer_callback_query(call.id, text)
    else:
        db.update_bid(id, user_casino['bid'], '* 2')
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.dice_kb)

@bot.callback_query_handler(lambda call: call.data == 'bid_user_dice_x10')
def bid_user_dice_x10(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    if user['money'] < user_casino['bid'] * 10:
        text = f'–£ —Ç–µ–±—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏'
        bot.answer_callback_query(call.id, text)
    else:
        db.update_bid(id, user_casino['bid'], '* 10')
        user_casino = db.get_casino(id)
        text = f"üí∞ *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞* üí∞\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"\
                f"üîò –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_casino['bid']}\n"\
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user['money']}\n"\
                f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.dice_kb)

@bot.callback_query_handler(lambda call: call.data == 'roll_dice')
def roll_dice(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_casino = db.get_casino(id)
    numbers = gl.dice_random()
    numbers_diller = numbers[0]
    numbers_user = numbers[1]
    photo = open(f'image/dice/{numbers_diller[0]}_{numbers_diller[1]}_{numbers_user[0]}_{numbers_user[1]}.png', 'rb')

    if user['money'] < user_casino['bid'] or user['money'] < 10:
        text = f"üò¢ –£–ø—Å! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç..."
        bot.edit_message_caption(text, id, call.message.message_id, reply_markup=kb.back_casino_kb)
        return

    if numbers_diller[0] + numbers_diller[1] > numbers_user[0] + numbers_user[1]:
        db.edit_money(id, user_casino['bid'])
        user = db.get_me(id)
        text = f"–î: {numbers_diller[0] + numbers_diller[1]} | –¢—ã: {numbers_user[0] + numbers_user[1]}\n" \
                f"‚úñ –ü—Ä–æ–∏–≥—Ä—ã—à: -{user_casino['bid']}\n" \
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['money']}"
    elif numbers_diller[0] + numbers_diller[1] < numbers_user[0] + numbers_user[1]:
        db.add_money(id, user_casino['bid'])
        user = db.get_me(id)
        text = f"–î: {numbers_diller[0] + numbers_diller[1]} | –¢—ã: {numbers_user[0] + numbers_user[1]}\n" \
                f"‚úî –í—ã–∏–≥—Ä—ã—à: +{user_casino['bid']}\n" \
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['money']}"
    else:
        text = f"–î: {numbers_diller[0] + numbers_diller[1]} | –¢—ã: {numbers_user[0] + numbers_user[1]}\n" \
                f"‚ûñ –ù–∏—á—å—è\n" \
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['money']}"
    bot.delete_message(id, call.message.message_id)
    bot.send_photo(id, photo, text, reply_markup=kb.back_dice_kb)
    


def post_listing(id, item_id, price, quantity):
    db = Database()
    post_id = db.set_product(id, item_id, price, quantity, gl.end_time(growth_hours=24))
    item_info = db.get_items_id(item_id)
    text = f"üõí *–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä!* #{post_id}\n\n"\
            f"*–¢–æ–≤–∞—Ä:* {item_info['name']}\n"\
            f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity}\n"\
            f"*–¶–µ–Ω–∞:* {price} –º–æ–Ω–µ—Ç"
    mesg = bot.send_message(ID_CHANNEL_MARKET, text, reply_markup=kb.product(post_id))
    db.set_message_id_product(post_id, mesg.message_id)

@bot.message_handler(commands=['sell'])
def handle_sell(message):
    id = message.from_user.id
    db = Database()
    user = db.get_me(id)

    if user['locate'] == 'training':
        bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
        return
    
    user_market = db.get_products_user(id)
    if len(user_market) == user['max_product']:
        bot.send_message(id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤', reply_markup=kb.back_main_menu_kb)
        return
    args = message.text.split()[1:]
    if len(args) < 3:
        bot.send_message(id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sell [id —Ç–æ–≤–∞—Ä–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [—Ü–µ–Ω–∞]\n"\
                                "–¶–µ–Ω–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –∑–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ —Ç–æ–≤–∞—Ä–∞", reply_markup=kb.back_main_menu_kb)
        return
    item_id, quantity, price = args[0], args[1], args[2]
    try:
        item_id = int(item_id)
        quantity = int(quantity)
        price = int(price)
        if item_id not in ID_ITEM_FOR_SELL:
            bot.send_message(id, '–¢–æ–≤–∞—Ä –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å', reply_markup=kb.back_main_menu_kb)
            return
        user_inventory_item = db.get_item_invetory(id, item_id)
        if user_inventory_item != None:
            if user_inventory_item['quantity'] >= quantity:
                post_listing(message.from_user.id, item_id, price, quantity)
                db.remove_item_id(id, item_id, quantity)
                bot.send_message(id, f"‚úÖ –¢–æ–≤–∞—Ä {item_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!", reply_markup=kb.back_main_menu_kb)
            else:
                bot.send_message(id, f"–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", reply_markup=kb.back_main_menu_kb)
        else:
            bot.send_message(id, f"–£ —Ç–µ–±—è –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", reply_markup=kb.back_main_menu_kb)
    except ValueError:
        bot.send_message(id, "–û—à–∏–±–∫–∞: id —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏", reply_markup=kb.back_main_menu_kb)

@bot.callback_query_handler(lambda call: call.data == 'sell')
def sell(call):
    id = call.from_user.id
    text =  f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sell [id —Ç–æ–≤–∞—Ä–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [—Ü–µ–Ω–∞]\n'\
            f'–¶–µ–Ω–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –∑–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ —Ç–æ–≤–∞—Ä–∞'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_main_menu_kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def handle_buy(call):
    id = call.from_user.id
    post_id = int(call.data.split('_')[1])
    db = Database()
    user = db.get_me(id)
    post = db.get_product(post_id)
    info_item = db.get_items_id(post['id_item'])

    if not(post):
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω")
        return
    
    if id == post['id_owner']:
        bot.answer_callback_query(call.id, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä!")
        return
    
    if user['money'] < post['price']:
        bot.answer_callback_query(call.id, '–£ —Ç–µ–±—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
        return

    db.delete_product(post_id)
    db.edit_money(id, post['price'])
    db.set_inventory(id, post['id_item'], post['quantity'])
    db.add_money(post['id_owner'], post['quantity'])
    bot.delete_message(ID_CHANNEL_MARKET, call.message.message_id)

    bot.send_message(post['id_owner'], 
                     f"–£ —Ç–µ–±—è –∫—É–ø–∏–ª–∏ {info_item['name']} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {post['quantity']}", reply_markup=kb.back_main_menu_kb)
    
    bot.answer_callback_query(call.id,f"–í—ã –∫—É–ø–∏–ª–∏ {info_item['name']}!")

@bot.callback_query_handler(lambda call: call.data == 'market')
def market(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)
    user_market = db.get_products_user(id)
    if user_market == []:
        text = f'–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–¥–∞–µ—à—å\n'\
                f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –ª–æ—Ç–æ–≤: {user['max_product']}\n\n"\
                f'–ö–∞–Ω–∞–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏: @farmhappymarket'
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.market_kb)
    else:
        text = ''
        for item in user_market:
            info_item = db.get_items_id(item['id_item'])
            text += f"‚â° {info_item['name']} ‚â°\n" \
                    f"‚ñ™ ID: {item['id']}\n" \
                    f"‚ñ™ –ö–æ–ª-–≤–æ: {item['quantity']}\n" \
                    f"‚ñ™ –¶–µ–Ω–∞: {item['price']}\n\n"
        text += f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –ª–æ—Ç–æ–≤: {user['max_product'] - len(user_market)}\n\n"\
                f'–ö–∞–Ω–∞–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏: @farmhappymarket'
        bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.market_kb)

@bot.callback_query_handler(lambda call: call.data == 'cancel_sell')
def cancel_sell(call):
    id = call.from_user.id 
    db = Database()
    user_market = db.get_products_user(id)
    if user_market == None:
        bot.answer_callback_query(call.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É')
        return
    
    text = f'–ù–∞–∂–º–∏ –Ω–∞ —Å–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.cancel_sell(user_market))

@bot.callback_query_handler(lambda call: call.data.startswith('slot_cancel_'))
def slot_cancel(call):
    id = call.from_user.id
    slot_id = int(call.data.split('_')[2])
    db = Database()
    post = db.get_product(slot_id)
    text = f'–¢–æ–≤–∞—Ä —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–∞–∂'

    if not(post):
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω")
        return
    
    db.set_inventory(id, post['id_item'], post['quantity'])
    db.delete_product(slot_id)
    bot.delete_message(ID_CHANNEL_MARKET, post['message_id'])
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_market_kb)



@bot.message_handler(commands=['support'])
def support(message):
    id = message.from_user.id
    db = Database()
    user = db.get_me(id)

    if user['locate'] == 'training':
        bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
        return

    text = f'‚úâÔ∏è –ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ —Å–≤–æ–µ–π(–µ–º) –ø—Ä–æ–±–ª–µ–º–µ/–≤–æ–ø—Ä–æ—Å–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report [—Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã]'
    bot.send_message(id, text, reply_markup=kb.support_kb)

@bot.callback_query_handler(lambda call: call.data == 'support')
def support(call):
    id = call.from_user.id
    text = f'‚úâÔ∏è –ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ —Å–≤–æ–µ–π(–µ–º) –ø—Ä–æ–±–ª–µ–º–µ/–≤–æ–ø—Ä–æ—Å–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report [—Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã]'
    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.support_kb)

@bot.message_handler(commands=['report'])
def report(message):
    '''
    /report [text]
    '''

    id = message.from_user.id
    db = Database()
    user = db.get_me(id)
    user_reports = db.get_report_addressing(id)

    if user['locate'] == 'training':
        bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
        return

    if len(user_reports) == 3: 
        bot.send_message(id, "‚ùå –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 3 –æ–±—Ä–∞—â–µ–Ω–∏—è.") 
        return

    text_report = message.text[8:]

    if text_report == '':
        text = f'‚úâÔ∏è –ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ —Å–≤–æ–µ–π(–µ–º) –ø—Ä–æ–±–ª–µ–º–µ/–≤–æ–ø—Ä–æ—Å–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report [—Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã]'
        bot.send_message(id, text, reply_markup=kb.back_main_menu_kb)
        return
    

    id_report = db.set_report(id, text_report)
    
    info_report = db.get_report(id_report)

    text_for_support = f'–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{id_report}\n\n'\
                        f"ID –∏–≥—Ä–æ–∫–∞: {info_report['id_addressing']}\n"\
                        f'–¢–µ–∫—Å—Ç: {text_report}'

    text = f'‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ'
    bot.send_message(id, text, reply_markup=kb.back_main_menu_kb)
    bot.send_message(ID_CHAT_REPORTS, text_for_support)


@bot.message_handler(commands=['reply_report'])
def reply_report(message):
    '''
    /reply_report [id_report] [state] [text]
    '''
    if message.chat.type == 'group':
        id_supported = message.from_user.id
        db = Database()
        text = message.text[14:]
        args = message.text.split(maxsplit=3)[1:]
        if text == '' or len(args) < 3:
            bot.reply_to(message, '–ö–æ–º–∞–Ω–¥–∞ /reply_report [ID –æ–±—Ä–∞—â–µ–Ω–∏—è] [—Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è] [—Ç–µ–∫—Å—Ç]')
            return
        
        id_report, state, text_reply_report = args[0], args[1], args[2]
        try:
            id_report = int(id_report)
            state = int(state)
            info_report = db.get_report(id_report)

            if state == 1:
                text_for_addressing = f'–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ: \n'\
                                        f'{text_reply_report}\n\n'\
                                        f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏—Å–ø–æ–ª—å–∑—É–π:\n'\
                                        f'/report_id [ID –æ–±—Ä–∞—â–µ–Ω–∏—è] [—Ç–µ–∫—Å—Ç]'
            elif state == 2:
                text_for_addressing = f'–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ: \n'\
                                        f'{text_reply_report}\n\n'\
                                        f'–†–µ—à–µ–Ω–∏–µ: –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–µ'
            elif state == 3:
                text_for_addressing = f'–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ: \n'\
                                        f'{text_reply_report}\n\n'\
                                        f'–†–µ—à–µ–Ω–∏–µ: –†–µ—à–µ–Ω–æ'
            else:
                bot.reply_to(message, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!')
                return

            db.update_state_report(id_report, state, id_supported)

            bot.send_message(info_report['id_addressing'], text_for_addressing)
            bot.reply_to(message, '‚úÖ –£–¥–∞—á–Ω–æ')
        except ValueError:
            bot.reply_to(message, '–û—à–∏–±–∫–∞: ID –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏')
        

@bot.message_handler(commands=['report_id'])
def report_id(message):
    '''
    /report_id [id_report] [text]
    '''
    id = message.from_user.id
    db = Database()
    user = db.get_me(id)
    
    if user['locate'] == 'training':
        bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
        return
    
    args = message.text.split(maxsplit=2)[1:]
    id_report, text = args[0], args[1]
    try:
        id_report = int(id_report)
        info_report = db.get_report(id_report)

        if info_report == None or info_report['id_addressing'] != id:
            bot.send_message(id, '–¢–∞–∫–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ—Ç', reply_markup=kb.back_main_menu_kb)
            return
        
        bot.send_message(id, '‚úÖ –£–¥–∞—á–Ω–æ', reply_markup=kb.back_main_menu_kb)

        text_for_support = f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{id_report}\n\n'\
                            f'{text}'
        bot.send_message(ID_CHAT_REPORTS, text_for_support)

    except ValueError:
        bot.send_message(id, 'ID –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∫–ª—ã–º —á–∏—Å–ª–æ–º', reply_markup=kb.back_main_menu_kb)

@bot.callback_query_handler(lambda call: call.data == 'my_reports')
def my_reports(call):
    id = call.from_user.id
    db = Database()
    reports = db.get_report_addressing(id)
    text = f"üìã <b>–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n\n"
    for report in reports:
        text += f"üÜî <b>ID:</b> {report['id']}\n"
        if report['state'] == 0:
            text += f"üü¢ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ üÜï\n"
        else:
            text += f"üü° <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ—à–µ–Ω–∏—è üîÑ\n"
        text += f"üìù <b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n"\
                f"‚îó <i>{report['text']}</i>\n"\
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"

    bot.edit_message_text(text, id, call.message.message_id, reply_markup=kb.back_support_kb, parse_mode='html')


@bot.message_handler(commands=['daily_bonus'])
def daily_bonus(message):
    id = message.from_user.id
    db = Database()
    user = db.get_me(id)

    if user['locate'] == 'training':
        bot.send_message(id, 
                         "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å.", 
                         reply_markup=kb.continue_training_kb)
        return

    if user['daily_bonus'] == 0:
        text = f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b> üéÅ\n\n"\
               f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:\n"\
               f"üí∞ <i>–ú–æ–Ω–µ—Ç—ã</i>\n"\
               f"üì¶ <i>–†–∞–Ω–¥–æ–º–Ω—ã–π –±–æ–∫—Å</i>\n"\
               f"üå± <i>–°–µ–º–µ–Ω–∞</i>\n\n"\
               f"üìå <b>–£—Å–ª–æ–≤–∏–µ:</b> –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª\n"\
               f"üåê <b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –ø–∞–±–ª–∏–∫ Happy Farm:</b> @newsHappyFarm\n\n"\
               f"üîπ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'</b>"
        bot.send_message(id, text, reply_markup=kb.check_follow_kb, parse_mode='HTML')
    else:
        text = f"‚è≥ <b>–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"\
               f"–¢—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–±–∏—Ä–∞–ª —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫.\n"\
               f"üïí –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!"
        bot.send_message(id, text, parse_mode='HTML')

@bot.callback_query_handler(lambda call: call.data == 'daily_bonus')
def daily_bonus_call(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)

    if user['daily_bonus'] == 0:
        text = f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b> üéÅ\n\n"\
               f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:\n"\
               f"üí∞ <i>–ú–æ–Ω–µ—Ç—ã</i>\n"\
               f"üì¶ <i>–†–∞–Ω–¥–æ–º–Ω—ã–π –±–æ–∫—Å</i>\n"\
               f"üå± <i>–°–µ–º–µ–Ω–∞</i>\n\n"\
               f"üìå <b>–£—Å–ª–æ–≤–∏–µ:</b> –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª\n"\
               f"üåê <b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –ø–∞–±–ª–∏–∫ Happy Farm:</b> @newsHappyFarm\n\n"\
               f"üîπ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'</b>"
        bot.edit_message_text(text, id, call.message.message_id, 
                            reply_markup=kb.check_follow_kb, parse_mode='HTML')
    else:
        text = f"‚è≥ <b>–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"\
               f"–¢—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–±–∏—Ä–∞–ª —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫.\n"\
               f"üïí –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!"
        bot.edit_message_text(text, id, call.message.message_id, parse_mode='HTML')

@bot.callback_query_handler(lambda call: call.data == 'check_follow')
def check_follow(call):
    id = call.from_user.id
    try:
        member = bot.get_chat_member(ID_CHANNEL_NEWS, id)
        if member.status in ['member', 'administrator', 'creator']:
            bot.edit_message_reply_markup(id, call.message.message_id, 
                                        reply_markup=kb.get_daily_bonus_kb)
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –∑–∞–±–∏—Ä–∞—Ç—å –±–æ–Ω—É—Å")
        else:
            bot.answer_callback_query(call.id, '‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!', show_alert=True)
    except Exception as e:
        bot.answer_callback_query(call.id, f'‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}', show_alert=True)

@bot.callback_query_handler(lambda call: call.data == 'get_daily_bonus')
def get_daily_bonus(call):
    id = call.from_user.id
    db = Database()
    user = db.get_me(id)

    if user['daily_bonus'] == 1:
        text = f"‚è≥ –¢—ã —É–∂–µ –∑–∞–±–∏—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å!"
        bot.delete_message(id, call.message.message_id)
        bot.answer_callback_query(call.id, text, show_alert=True)
        return
    
    reward = gl.generate_random_daily_bonus()
    info_item = db.get_items_id(reward[0])

    text = f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–∞!</b> üéâ\n\n"\
           f"–¢—ã –ø–æ–ª—É—á–∏–ª:\n"\
           f"üéÅ <b>{info_item['name']}</b> x{reward[1]}\n\n"\
           f"üïí –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞!"
           
    bot.edit_message_text(text, id, call.message.message_id, parse_mode='HTML')
    if reward[0] == 0:
        db.add_money(id, reward[1])
    else:
        db.set_inventory(id, reward[0], reward[1])
    db.set_daily_bonus(id, 1)

    



# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ 

def update_tasks():
    db = Database()
    users = db.get_all_id_users()
    for user in users:
        info_of_user = db.get_info_for_tasks(user['id'])
        db.set_tasks(user['id'], gl.generate_tasks(info_of_user))

def send_notification_harvest():
    db = Database()
    users = db.get_id_users_ready_harvest()
    for user in users:
        if gl.check_time(user['time_end']):
            bot.send_message(user['id_owner'], f"–ù–∞ –≥—Ä—è–¥–∫–µ ‚Ññ{user['id_bed']} –≤—ã—Ä–æ—Å —É—Ä–æ–∂–∞–π")
            db.set_state_bed(user['id_owner'], user['id_bed'], 2)

def daily_bonus_reset():
    db = Database()
    db.reset_daily_bonus()

def delete_post_market():
    db = Database()
    products = db.get_all_product()
    for product in products:
        if gl.check_time(product['time_delete']):
            db.set_inventory(product['id_owner'], product['id_item'], product['quantity'])
            db.delete_product(product['id'])
            bot.delete_message(ID_CHANNEL_MARKET, product['message_id'])
            text = f"üõí –¢–æ–≤–∞—Ä #{product['id']} —Å–Ω—è—Ç —Å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏.\n"\
                    f"üîô –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."
            bot.send_message(product['id_owner'], text)
    


schedule.every(1).minutes.do(send_notification_harvest)
schedule.every().day.at('00:00').do(update_tasks)
schedule.every().day.at('00:00').do(daily_bonus_reset)
schedule.every(1).minutes.do(delete_post_market)



def scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)


scheduler_thread = threading.Thread(target=scheduler, daemon=True).start()

bot.polling(none_stop=True, interval=0)